// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRvdXRwdXRzL2NhbWVyYS5wcm90bxINcHJvdG9idWZfbXNncyLjAQoSQ2Ft",
            "ZXJhU2Vuc29yT3V0cHV0Ei0KCnJlc29sdXRpb24YASABKAsyGS5wcm90b2J1",
            "Zl9tc2dzLlJlc29sdXRpb24SNgoPaG9yaXpvbnRhbFNjYW5zGAIgAygLMh0u",
            "cHJvdG9idWZfbXNncy5Ib3Jpem9udGFsU2NhbhI3Cg9kZXRlY3RlZE9iamVj",
            "dHMYAyADKA4yHi5wcm90b2J1Zl9tc2dzLkRldGVjdGVkT2JqZWN0cxItCgpk",
            "ZWJ1Z0ZyYW1lGAQgASgLMhkucHJvdG9idWZfbXNncy5EZWJ1Z0ZyYW1lIisK",
            "ClJlc29sdXRpb24SDQoFd2lkdGgYASABKA0SDgoGaGVpZ2h0GAIgASgNIjoK",
            "Dkhvcml6b250YWxTY2FuEg0KBXhMZWZ0GAEgASgNEg4KBnhSaWdodBgCIAEo",
            "DRIJCgF5GAMgASgNIkEKCkRlYnVnRnJhbWUSDAoEanBlZxgBIAEoDBIlCgZj",
            "YW52YXMYBSABKAsyFS5wcm90b2J1Zl9tc2dzLkNhbnZhcyLJAQoMQ2FudmFz",
            "T2JqZWN0EjQKBmNpcmNsZRgBIAEoCzIiLnByb3RvYnVmX21zZ3MuQ2FudmFz",
            "T2JqZWN0LkNpcmNsZUgAGh0KBVBvaW50EgkKAXgYASABKA0SCQoBeRgCIAEo",
            "DRpaCgZDaXJjbGUSMQoGY2VudGVyGAEgASgLMiEucHJvdG9idWZfbXNncy5D",
            "YW52YXNPYmplY3QuUG9pbnQSDgoGcmFkaXVzGAIgASgNEg0KBXdpZHRoGAMg",
            "ASgNQggKBm9iamVjdCJVCgZDYW52YXMSDQoFd2lkdGgYASABKA0SDgoGaGVp",
            "Z2h0GAIgASgNEiwKB29iamVjdHMYAyADKAsyGy5wcm90b2J1Zl9tc2dzLkNh",
            "bnZhc09iamVjdCq5AQoPRGV0ZWN0ZWRPYmplY3RzEg8KC0ZJTklTSF9MSU5F",
            "EAASDQoJT0ZGX1RSQUNLEAESDAoIT0JTVEFDTEUQAhIQCgxJTlRFUlNFQ1RJ",
            "T04QAxIVChFNSVNTSU5HX0xFRlRfTEFORRAEEhYKEk1JU1NJTkdfUklHSFRf",
            "TEFORRAFEg8KC1NIQVJQX1JJR0hUEAYSDgoKU0hBUlBfTEVGVBAHEgoKBlVf",
            "VFVSThAIEgoKBlNfVFVSThAJQhBaDmFzZS9wYl9vdXRwdXRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtobufMsgs.DetectedObjects), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput), global::ProtobufMsgs.CameraSensorOutput.Parser, new[]{ "Resolution", "HorizontalScans", "DetectedObjects", "DebugFrame" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.Resolution), global::ProtobufMsgs.Resolution.Parser, new[]{ "Width", "Height" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.HorizontalScan), global::ProtobufMsgs.HorizontalScan.Parser, new[]{ "XLeft", "XRight", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.DebugFrame), global::ProtobufMsgs.DebugFrame.Parser, new[]{ "Jpeg", "Canvas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject), global::ProtobufMsgs.CanvasObject.Parser, new[]{ "Circle" }, new[]{ "Object" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Point), global::ProtobufMsgs.CanvasObject.Types.Point.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Circle), global::ProtobufMsgs.CanvasObject.Types.Circle.Parser, new[]{ "Center", "Radius", "Width" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.Canvas), global::ProtobufMsgs.Canvas.Parser, new[]{ "Width", "Height", "Objects" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Possible Objects the Imaging Service may detect
  /// </summary>
  public enum DetectedObjects {
    /// <summary>
    /// Finish_line_detected 
    /// </summary>
    [pbr::OriginalName("FINISH_LINE")] FinishLine = 0,
    /// <summary>
    /// Car no longer on the track 
    /// </summary>
    [pbr::OriginalName("OFF_TRACK")] OffTrack = 1,
    /// <summary>
    /// Detected obstacle 
    /// </summary>
    [pbr::OriginalName("OBSTACLE")] Obstacle = 2,
    /// <summary>
    /// Detected intersection 
    /// </summary>
    [pbr::OriginalName("INTERSECTION")] Intersection = 3,
    /// <summary>
    /// Can not find left lane 
    /// </summary>
    [pbr::OriginalName("MISSING_LEFT_LANE")] MissingLeftLane = 4,
    /// <summary>
    /// Can not find right lane 
    /// </summary>
    [pbr::OriginalName("MISSING_RIGHT_LANE")] MissingRightLane = 5,
    /// <summary>
    /// 90 degree right turn 
    /// </summary>
    [pbr::OriginalName("SHARP_RIGHT")] SharpRight = 6,
    /// <summary>
    /// 90 degree left turn  
    /// </summary>
    [pbr::OriginalName("SHARP_LEFT")] SharpLeft = 7,
    /// <summary>
    /// Detected U turn 
    /// </summary>
    [pbr::OriginalName("U_TURN")] UTurn = 8,
    /// <summary>
    /// Detected S turn (double u turn) 
    /// </summary>
    [pbr::OriginalName("S_TURN")] STurn = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  ///
  /// This is the message format that a camera-like service can send out. For example, the official ASE imaging service
  /// uses this output format. This can then be used by (for example) a controller, to determine how to steer, to stay
  /// on the track, or to detect obstacles, intersections, etc.
  /// </summary>
  public sealed partial class CameraSensorOutput : pb::IMessage<CameraSensorOutput> {
    private static readonly pb::MessageParser<CameraSensorOutput> _parser = new pb::MessageParser<CameraSensorOutput>(() => new CameraSensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraSensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput(CameraSensorOutput other) : this() {
      resolution_ = other.resolution_ != null ? other.resolution_.Clone() : null;
      horizontalScans_ = other.horizontalScans_.Clone();
      detectedObjects_ = other.detectedObjects_.Clone();
      debugFrame_ = other.debugFrame_ != null ? other.debugFrame_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput Clone() {
      return new CameraSensorOutput(this);
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 1;
    private global::ProtobufMsgs.Resolution resolution_;
    /// <summary>
    /// Basic information, contains everything you need to know to steer and compute the middle of the track
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.Resolution Resolution {
      get { return resolution_; }
      set {
        resolution_ = value;
      }
    }

    /// <summary>Field number for the "horizontalScans" field.</summary>
    public const int HorizontalScansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ProtobufMsgs.HorizontalScan> _repeated_horizontalScans_codec
        = pb::FieldCodec.ForMessage(18, global::ProtobufMsgs.HorizontalScan.Parser);
    private readonly pbc::RepeatedField<global::ProtobufMsgs.HorizontalScan> horizontalScans_ = new pbc::RepeatedField<global::ProtobufMsgs.HorizontalScan>();
    /// <summary>
    /// Horizontal scans of the track, where each scan returns the track edges it finds in the image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtobufMsgs.HorizontalScan> HorizontalScans {
      get { return horizontalScans_; }
    }

    /// <summary>Field number for the "detectedObjects" field.</summary>
    public const int DetectedObjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ProtobufMsgs.DetectedObjects> _repeated_detectedObjects_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::ProtobufMsgs.DetectedObjects) x);
    private readonly pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects> detectedObjects_ = new pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects> DetectedObjects {
      get { return detectedObjects_; }
    }

    /// <summary>Field number for the "debugFrame" field.</summary>
    public const int DebugFrameFieldNumber = 4;
    private global::ProtobufMsgs.DebugFrame debugFrame_;
    /// <summary>
    /// Additional information that can be used to debug the image processing
    /// if present, it is rendered in roverctl-web
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.DebugFrame DebugFrame {
      get { return debugFrame_; }
      set {
        debugFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraSensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraSensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resolution, other.Resolution)) return false;
      if(!horizontalScans_.Equals(other.horizontalScans_)) return false;
      if(!detectedObjects_.Equals(other.detectedObjects_)) return false;
      if (!object.Equals(DebugFrame, other.DebugFrame)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resolution_ != null) hash ^= Resolution.GetHashCode();
      hash ^= horizontalScans_.GetHashCode();
      hash ^= detectedObjects_.GetHashCode();
      if (debugFrame_ != null) hash ^= DebugFrame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resolution_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resolution);
      }
      horizontalScans_.WriteTo(output, _repeated_horizontalScans_codec);
      detectedObjects_.WriteTo(output, _repeated_detectedObjects_codec);
      if (debugFrame_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DebugFrame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resolution_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resolution);
      }
      size += horizontalScans_.CalculateSize(_repeated_horizontalScans_codec);
      size += detectedObjects_.CalculateSize(_repeated_detectedObjects_codec);
      if (debugFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugFrame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraSensorOutput other) {
      if (other == null) {
        return;
      }
      if (other.resolution_ != null) {
        if (resolution_ == null) {
          Resolution = new global::ProtobufMsgs.Resolution();
        }
        Resolution.MergeFrom(other.Resolution);
      }
      horizontalScans_.Add(other.horizontalScans_);
      detectedObjects_.Add(other.detectedObjects_);
      if (other.debugFrame_ != null) {
        if (debugFrame_ == null) {
          DebugFrame = new global::ProtobufMsgs.DebugFrame();
        }
        DebugFrame.MergeFrom(other.DebugFrame);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resolution_ == null) {
              Resolution = new global::ProtobufMsgs.Resolution();
            }
            input.ReadMessage(Resolution);
            break;
          }
          case 18: {
            horizontalScans_.AddEntriesFrom(input, _repeated_horizontalScans_codec);
            break;
          }
          case 26:
          case 24: {
            detectedObjects_.AddEntriesFrom(input, _repeated_detectedObjects_codec);
            break;
          }
          case 34: {
            if (debugFrame_ == null) {
              DebugFrame = new global::ProtobufMsgs.DebugFrame();
            }
            input.ReadMessage(DebugFrame);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resolution : pb::IMessage<Resolution> {
    private static readonly pb::MessageParser<Resolution> _parser = new pb::MessageParser<Resolution>(() => new Resolution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution(Resolution other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution Clone() {
      return new Resolution(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    /// <summary>
    /// Width of the image in pixels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    /// <summary>
    /// Height of the image in pixels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resolution other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HorizontalScan : pb::IMessage<HorizontalScan> {
    private static readonly pb::MessageParser<HorizontalScan> _parser = new pb::MessageParser<HorizontalScan>(() => new HorizontalScan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HorizontalScan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HorizontalScan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HorizontalScan(HorizontalScan other) : this() {
      xLeft_ = other.xLeft_;
      xRight_ = other.xRight_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HorizontalScan Clone() {
      return new HorizontalScan(this);
    }

    /// <summary>Field number for the "xLeft" field.</summary>
    public const int XLeftFieldNumber = 1;
    private uint xLeft_;
    /// <summary>
    /// Leftmost point in the scan in pixels (is left edge of the track)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XLeft {
      get { return xLeft_; }
      set {
        xLeft_ = value;
      }
    }

    /// <summary>Field number for the "xRight" field.</summary>
    public const int XRightFieldNumber = 2;
    private uint xRight_;
    /// <summary>
    /// Rightmost point in the scan in pixels (is right edge of the track)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint XRight {
      get { return xRight_; }
      set {
        xRight_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private uint y_;
    /// <summary>
    /// Y coordinate of the scan in pixels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HorizontalScan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HorizontalScan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XLeft != other.XLeft) return false;
      if (XRight != other.XRight) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XLeft != 0) hash ^= XLeft.GetHashCode();
      if (XRight != 0) hash ^= XRight.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XLeft != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(XLeft);
      }
      if (XRight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(XRight);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XLeft);
      }
      if (XRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(XRight);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HorizontalScan other) {
      if (other == null) {
        return;
      }
      if (other.XLeft != 0) {
        XLeft = other.XLeft;
      }
      if (other.XRight != 0) {
        XRight = other.XRight;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            XLeft = input.ReadUInt32();
            break;
          }
          case 16: {
            XRight = input.ReadUInt32();
            break;
          }
          case 24: {
            Y = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugFrame : pb::IMessage<DebugFrame> {
    private static readonly pb::MessageParser<DebugFrame> _parser = new pb::MessageParser<DebugFrame>(() => new DebugFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFrame(DebugFrame other) : this() {
      jpeg_ = other.jpeg_;
      canvas_ = other.canvas_ != null ? other.canvas_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugFrame Clone() {
      return new DebugFrame(this);
    }

    /// <summary>Field number for the "jpeg" field.</summary>
    public const int JpegFieldNumber = 1;
    private pb::ByteString jpeg_ = pb::ByteString.Empty;
    /// <summary>
    /// (Compressed) JPEG image of the camera output, useful for debugging
    /// just JPEG bytes, that will be rendered in roverctl-web
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Jpeg {
      get { return jpeg_; }
      set {
        jpeg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canvas" field.</summary>
    public const int CanvasFieldNumber = 5;
    private global::ProtobufMsgs.Canvas canvas_;
    /// <summary>
    /// A "canvas" that you can "draw" on, for example by placing points, these are also rendered in roverctl-web
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.Canvas Canvas {
      get { return canvas_; }
      set {
        canvas_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Jpeg != other.Jpeg) return false;
      if (!object.Equals(Canvas, other.Canvas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Jpeg.Length != 0) hash ^= Jpeg.GetHashCode();
      if (canvas_ != null) hash ^= Canvas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Jpeg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Jpeg);
      }
      if (canvas_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Canvas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Jpeg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Jpeg);
      }
      if (canvas_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Canvas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugFrame other) {
      if (other == null) {
        return;
      }
      if (other.Jpeg.Length != 0) {
        Jpeg = other.Jpeg;
      }
      if (other.canvas_ != null) {
        if (canvas_ == null) {
          Canvas = new global::ProtobufMsgs.Canvas();
        }
        Canvas.MergeFrom(other.Canvas);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Jpeg = input.ReadBytes();
            break;
          }
          case 42: {
            if (canvas_ == null) {
              Canvas = new global::ProtobufMsgs.Canvas();
            }
            input.ReadMessage(Canvas);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CanvasObject : pb::IMessage<CanvasObject> {
    private static readonly pb::MessageParser<CanvasObject> _parser = new pb::MessageParser<CanvasObject>(() => new CanvasObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanvasObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject(CanvasObject other) : this() {
      switch (other.ObjectCase) {
        case ObjectOneofCase.Circle:
          Circle = other.Circle.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject Clone() {
      return new CanvasObject(this);
    }

    /// <summary>Field number for the "circle" field.</summary>
    public const int CircleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CanvasObject.Types.Circle Circle {
      get { return objectCase_ == ObjectOneofCase.Circle ? (global::ProtobufMsgs.CanvasObject.Types.Circle) object_ : null; }
      set {
        object_ = value;
        objectCase_ = value == null ? ObjectOneofCase.None : ObjectOneofCase.Circle;
      }
    }

    private object object_;
    /// <summary>Enum of possible cases for the "object" oneof.</summary>
    public enum ObjectOneofCase {
      None = 0,
      Circle = 1,
    }
    private ObjectOneofCase objectCase_ = ObjectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectOneofCase ObjectCase {
      get { return objectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObject() {
      objectCase_ = ObjectOneofCase.None;
      object_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanvasObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanvasObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Circle, other.Circle)) return false;
      if (ObjectCase != other.ObjectCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectCase_ == ObjectOneofCase.Circle) hash ^= Circle.GetHashCode();
      hash ^= (int) objectCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectCase_ == ObjectOneofCase.Circle) {
        output.WriteRawTag(10);
        output.WriteMessage(Circle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectCase_ == ObjectOneofCase.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Circle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanvasObject other) {
      if (other == null) {
        return;
      }
      switch (other.ObjectCase) {
        case ObjectOneofCase.Circle:
          if (Circle == null) {
            Circle = new global::ProtobufMsgs.CanvasObject.Types.Circle();
          }
          Circle.MergeFrom(other.Circle);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ProtobufMsgs.CanvasObject.Types.Circle subBuilder = new global::ProtobufMsgs.CanvasObject.Types.Circle();
            if (objectCase_ == ObjectOneofCase.Circle) {
              subBuilder.MergeFrom(Circle);
            }
            input.ReadMessage(subBuilder);
            Circle = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CanvasObject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Point : pb::IMessage<Point> {
        private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Point> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point(Point other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point Clone() {
          return new Point(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Point);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Point other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Point other) {
          if (other == null) {
            return;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Circle : pb::IMessage<Circle> {
        private static readonly pb::MessageParser<Circle> _parser = new pb::MessageParser<Circle>(() => new Circle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Circle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle(Circle other) : this() {
          center_ = other.center_ != null ? other.center_.Clone() : null;
          radius_ = other.radius_;
          width_ = other.width_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle Clone() {
          return new Circle(this);
        }

        /// <summary>Field number for the "center" field.</summary>
        public const int CenterFieldNumber = 1;
        private global::ProtobufMsgs.CanvasObject.Types.Point center_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point Center {
          get { return center_; }
          set {
            center_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 2;
        private uint radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Circle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Circle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Center, other.Center)) return false;
          if (Radius != other.Radius) return false;
          if (Width != other.Width) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (center_ != null) hash ^= Center.GetHashCode();
          if (Radius != 0) hash ^= Radius.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (center_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Center);
          }
          if (Radius != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Radius);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Width);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (center_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
          }
          if (Radius != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Circle other) {
          if (other == null) {
            return;
          }
          if (other.center_ != null) {
            if (center_ == null) {
              Center = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            Center.MergeFrom(other.Center);
          }
          if (other.Radius != 0) {
            Radius = other.Radius;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (center_ == null) {
                  Center = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(Center);
                break;
              }
              case 16: {
                Radius = input.ReadUInt32();
                break;
              }
              case 24: {
                Width = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Canvas : pb::IMessage<Canvas> {
    private static readonly pb::MessageParser<Canvas> _parser = new pb::MessageParser<Canvas>(() => new Canvas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Canvas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas(Canvas other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas Clone() {
      return new Canvas(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    /// <summary>
    /// The width and height are a legacy feature, they should be the same as the resolution of the camera
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ProtobufMsgs.CanvasObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(26, global::ProtobufMsgs.CanvasObject.Parser);
    private readonly pbc::RepeatedField<global::ProtobufMsgs.CanvasObject> objects_ = new pbc::RepeatedField<global::ProtobufMsgs.CanvasObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtobufMsgs.CanvasObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Canvas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Canvas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Canvas other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
