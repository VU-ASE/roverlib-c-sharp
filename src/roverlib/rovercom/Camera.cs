// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRvdXRwdXRzL2NhbWVyYS5wcm90bxINcHJvdG9idWZfbXNncyKGBgoMQ2Fu",
            "dmFzT2JqZWN0EjAKBGxpbmUYASABKAsyIC5wcm90b2J1Zl9tc2dzLkNhbnZh",
            "c09iamVjdC5MaW5lSAASOgoJcmVjdGFuZ2xlGAIgASgLMiUucHJvdG9idWZf",
            "bXNncy5DYW52YXNPYmplY3QuUmVjdGFuZ2xlSAASNAoGY2lyY2xlGAMgASgL",
            "MiIucHJvdG9idWZfbXNncy5DYW52YXNPYmplY3QuQ2lyY2xlSAAaHQoFUG9p",
            "bnQSCQoBeBgBIAEoDRIJCgF5GAIgASgNGjMKBUNvbG9yEgkKAXIYASABKA0S",
            "CQoBZxgCIAEoDRIJCgFiGAMgASgNEgkKAWEYBCABKA0aqQEKBExpbmUSMAoF",
            "c3RhcnQYASABKAsyIS5wcm90b2J1Zl9tc2dzLkNhbnZhc09iamVjdC5Qb2lu",
            "dBIuCgNlbmQYAiABKAsyIS5wcm90b2J1Zl9tc2dzLkNhbnZhc09iamVjdC5Q",
            "b2ludBINCgV3aWR0aBgDIAEoDRIwCgVjb2xvchgEIAEoCzIhLnByb3RvYnVm",
            "X21zZ3MuQ2FudmFzT2JqZWN0LkNvbG9yGrgBCglSZWN0YW5nbGUSMgoHdG9w",
            "TGVmdBgBIAEoCzIhLnByb3RvYnVmX21zZ3MuQ2FudmFzT2JqZWN0LlBvaW50",
            "EjYKC2JvdHRvbVJpZ2h0GAIgASgLMiEucHJvdG9idWZfbXNncy5DYW52YXNP",
            "YmplY3QuUG9pbnQSDQoFd2lkdGgYAyABKA0SMAoFY29sb3IYBCABKAsyIS5w",
            "cm90b2J1Zl9tc2dzLkNhbnZhc09iamVjdC5Db2xvchqMAQoGQ2lyY2xlEjEK",
            "BmNlbnRlchgBIAEoCzIhLnByb3RvYnVmX21zZ3MuQ2FudmFzT2JqZWN0LlBv",
            "aW50Eg4KBnJhZGl1cxgCIAEoDRINCgV3aWR0aBgDIAEoDRIwCgVjb2xvchgE",
            "IAEoCzIhLnByb3RvYnVmX21zZ3MuQ2FudmFzT2JqZWN0LkNvbG9yQggKBm9i",
            "amVjdCJVCgZDYW52YXMSDQoFd2lkdGgYASABKA0SDgoGaGVpZ2h0GAIgASgN",
            "EiwKB29iamVjdHMYAyADKAsyGy5wcm90b2J1Zl9tc2dzLkNhbnZhc09iamVj",
            "dCLjAwoSQ2FtZXJhU2Vuc29yT3V0cHV0EkAKCnRyYWplY3RvcnkYASABKAsy",
            "LC5wcm90b2J1Zl9tc2dzLkNhbWVyYVNlbnNvck91dHB1dC5UcmFqZWN0b3J5",
            "EkEKC2RlYnVnX2ZyYW1lGAIgASgLMiwucHJvdG9idWZfbXNncy5DYW1lcmFT",
            "ZW5zb3JPdXRwdXQuRGVidWdGcmFtZRI6CgdvYmplY3RzGAMgASgLMikucHJv",
            "dG9idWZfbXNncy5DYW1lcmFTZW5zb3JPdXRwdXQuT2JqZWN0cxqOAQoKVHJh",
            "amVjdG9yeRJCCgZwb2ludHMYASADKAsyMi5wcm90b2J1Zl9tc2dzLkNhbWVy",
            "YVNlbnNvck91dHB1dC5UcmFqZWN0b3J5LlBvaW50Eg0KBXdpZHRoGAIgASgN",
            "Eg4KBmhlaWdodBgDIAEoDRodCgVQb2ludBIJCgF4GAEgASgFEgkKAXkYAiAB",
            "KAUaQQoKRGVidWdGcmFtZRIMCgRqcGVnGAEgASgMEiUKBmNhbnZhcxgFIAEo",
            "CzIVLnByb3RvYnVmX21zZ3MuQ2FudmFzGjgKB09iamVjdHMSLQoFaXRlbXMY",
            "ASADKA4yHi5wcm90b2J1Zl9tc2dzLkRldGVjdGVkT2JqZWN0cyq5AQoPRGV0",
            "ZWN0ZWRPYmplY3RzEg8KC0ZJTklTSF9MSU5FEAASDQoJT0ZGX1RSQUNLEAES",
            "DAoIT0JTVEFDTEUQAhIQCgxJTlRFUlNFQ1RJT04QAxIVChFNSVNTSU5HX0xF",
            "RlRfTEFORRAEEhYKEk1JU1NJTkdfUklHSFRfTEFORRAFEg8KC1NIQVJQX1JJ",
            "R0hUEAYSDgoKU0hBUlBfTEVGVBAHEgoKBlVfVFVSThAIEgoKBlNfVFVSThAJ",
            "QhBaDmFzZS9wYl9vdXRwdXRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtobufMsgs.DetectedObjects), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject), global::ProtobufMsgs.CanvasObject.Parser, new[]{ "Line", "Rectangle", "Circle" }, new[]{ "Object" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Point), global::ProtobufMsgs.CanvasObject.Types.Point.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Color), global::ProtobufMsgs.CanvasObject.Types.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Line), global::ProtobufMsgs.CanvasObject.Types.Line.Parser, new[]{ "Start", "End", "Width", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Rectangle), global::ProtobufMsgs.CanvasObject.Types.Rectangle.Parser, new[]{ "TopLeft", "BottomRight", "Width", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CanvasObject.Types.Circle), global::ProtobufMsgs.CanvasObject.Types.Circle.Parser, new[]{ "Center", "Radius", "Width", "Color" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.Canvas), global::ProtobufMsgs.Canvas.Parser, new[]{ "Width", "Height", "Objects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput), global::ProtobufMsgs.CameraSensorOutput.Parser, new[]{ "Trajectory", "DebugFrame", "Objects" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory), global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Parser, new[]{ "Points", "Width", "Height" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point), global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point.Parser, new[]{ "X", "Y" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame), global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame.Parser, new[]{ "Jpeg", "Canvas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.CameraSensorOutput.Types.Objects), global::ProtobufMsgs.CameraSensorOutput.Types.Objects.Parser, new[]{ "Items" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Possible Objects the Imaging Module may detect
  /// </summary>
  public enum DetectedObjects {
    /// <summary>
    /// Finish_line_detected 
    /// </summary>
    [pbr::OriginalName("FINISH_LINE")] FinishLine = 0,
    /// <summary>
    /// Car no longer on the track 
    /// </summary>
    [pbr::OriginalName("OFF_TRACK")] OffTrack = 1,
    /// <summary>
    /// Detected obstacle 
    /// </summary>
    [pbr::OriginalName("OBSTACLE")] Obstacle = 2,
    /// <summary>
    /// Detected intersection 
    /// </summary>
    [pbr::OriginalName("INTERSECTION")] Intersection = 3,
    /// <summary>
    /// Can not find left lane 
    /// </summary>
    [pbr::OriginalName("MISSING_LEFT_LANE")] MissingLeftLane = 4,
    /// <summary>
    /// Can not find right lane 
    /// </summary>
    [pbr::OriginalName("MISSING_RIGHT_LANE")] MissingRightLane = 5,
    /// <summary>
    /// 90 degree right turn 
    /// </summary>
    [pbr::OriginalName("SHARP_RIGHT")] SharpRight = 6,
    /// <summary>
    /// 90 degree left turn  
    /// </summary>
    [pbr::OriginalName("SHARP_LEFT")] SharpLeft = 7,
    /// <summary>
    /// Detected U turn 
    /// </summary>
    [pbr::OriginalName("U_TURN")] UTurn = 8,
    /// <summary>
    /// Detected S turn (double u turn) 
    /// </summary>
    [pbr::OriginalName("S_TURN")] STurn = 9,
  }

  #endregion

  #region Messages
  public sealed partial class CanvasObject : pb::IMessage<CanvasObject> {
    private static readonly pb::MessageParser<CanvasObject> _parser = new pb::MessageParser<CanvasObject>(() => new CanvasObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CanvasObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject(CanvasObject other) : this() {
      switch (other.ObjectCase) {
        case ObjectOneofCase.Line:
          Line = other.Line.Clone();
          break;
        case ObjectOneofCase.Rectangle:
          Rectangle = other.Rectangle.Clone();
          break;
        case ObjectOneofCase.Circle:
          Circle = other.Circle.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CanvasObject Clone() {
      return new CanvasObject(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CanvasObject.Types.Line Line {
      get { return objectCase_ == ObjectOneofCase.Line ? (global::ProtobufMsgs.CanvasObject.Types.Line) object_ : null; }
      set {
        object_ = value;
        objectCase_ = value == null ? ObjectOneofCase.None : ObjectOneofCase.Line;
      }
    }

    /// <summary>Field number for the "rectangle" field.</summary>
    public const int RectangleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CanvasObject.Types.Rectangle Rectangle {
      get { return objectCase_ == ObjectOneofCase.Rectangle ? (global::ProtobufMsgs.CanvasObject.Types.Rectangle) object_ : null; }
      set {
        object_ = value;
        objectCase_ = value == null ? ObjectOneofCase.None : ObjectOneofCase.Rectangle;
      }
    }

    /// <summary>Field number for the "circle" field.</summary>
    public const int CircleFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CanvasObject.Types.Circle Circle {
      get { return objectCase_ == ObjectOneofCase.Circle ? (global::ProtobufMsgs.CanvasObject.Types.Circle) object_ : null; }
      set {
        object_ = value;
        objectCase_ = value == null ? ObjectOneofCase.None : ObjectOneofCase.Circle;
      }
    }

    private object object_;
    /// <summary>Enum of possible cases for the "object" oneof.</summary>
    public enum ObjectOneofCase {
      None = 0,
      Line = 1,
      Rectangle = 2,
      Circle = 3,
    }
    private ObjectOneofCase objectCase_ = ObjectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectOneofCase ObjectCase {
      get { return objectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearObject() {
      objectCase_ = ObjectOneofCase.None;
      object_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CanvasObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CanvasObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Line, other.Line)) return false;
      if (!object.Equals(Rectangle, other.Rectangle)) return false;
      if (!object.Equals(Circle, other.Circle)) return false;
      if (ObjectCase != other.ObjectCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectCase_ == ObjectOneofCase.Line) hash ^= Line.GetHashCode();
      if (objectCase_ == ObjectOneofCase.Rectangle) hash ^= Rectangle.GetHashCode();
      if (objectCase_ == ObjectOneofCase.Circle) hash ^= Circle.GetHashCode();
      hash ^= (int) objectCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectCase_ == ObjectOneofCase.Line) {
        output.WriteRawTag(10);
        output.WriteMessage(Line);
      }
      if (objectCase_ == ObjectOneofCase.Rectangle) {
        output.WriteRawTag(18);
        output.WriteMessage(Rectangle);
      }
      if (objectCase_ == ObjectOneofCase.Circle) {
        output.WriteRawTag(26);
        output.WriteMessage(Circle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectCase_ == ObjectOneofCase.Line) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Line);
      }
      if (objectCase_ == ObjectOneofCase.Rectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
      }
      if (objectCase_ == ObjectOneofCase.Circle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Circle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CanvasObject other) {
      if (other == null) {
        return;
      }
      switch (other.ObjectCase) {
        case ObjectOneofCase.Line:
          if (Line == null) {
            Line = new global::ProtobufMsgs.CanvasObject.Types.Line();
          }
          Line.MergeFrom(other.Line);
          break;
        case ObjectOneofCase.Rectangle:
          if (Rectangle == null) {
            Rectangle = new global::ProtobufMsgs.CanvasObject.Types.Rectangle();
          }
          Rectangle.MergeFrom(other.Rectangle);
          break;
        case ObjectOneofCase.Circle:
          if (Circle == null) {
            Circle = new global::ProtobufMsgs.CanvasObject.Types.Circle();
          }
          Circle.MergeFrom(other.Circle);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ProtobufMsgs.CanvasObject.Types.Line subBuilder = new global::ProtobufMsgs.CanvasObject.Types.Line();
            if (objectCase_ == ObjectOneofCase.Line) {
              subBuilder.MergeFrom(Line);
            }
            input.ReadMessage(subBuilder);
            Line = subBuilder;
            break;
          }
          case 18: {
            global::ProtobufMsgs.CanvasObject.Types.Rectangle subBuilder = new global::ProtobufMsgs.CanvasObject.Types.Rectangle();
            if (objectCase_ == ObjectOneofCase.Rectangle) {
              subBuilder.MergeFrom(Rectangle);
            }
            input.ReadMessage(subBuilder);
            Rectangle = subBuilder;
            break;
          }
          case 26: {
            global::ProtobufMsgs.CanvasObject.Types.Circle subBuilder = new global::ProtobufMsgs.CanvasObject.Types.Circle();
            if (objectCase_ == ObjectOneofCase.Circle) {
              subBuilder.MergeFrom(Circle);
            }
            input.ReadMessage(subBuilder);
            Circle = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CanvasObject message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Point : pb::IMessage<Point> {
        private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Point> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point(Point other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point Clone() {
          return new Point(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Point);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Point other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Point other) {
          if (other == null) {
            return;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Color : pb::IMessage<Color> {
        private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Color> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color(Color other) : this() {
          r_ = other.r_;
          g_ = other.g_;
          b_ = other.b_;
          a_ = other.a_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Color Clone() {
          return new Color(this);
        }

        /// <summary>Field number for the "r" field.</summary>
        public const int RFieldNumber = 1;
        private uint r_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint R {
          get { return r_; }
          set {
            r_ = value;
          }
        }

        /// <summary>Field number for the "g" field.</summary>
        public const int GFieldNumber = 2;
        private uint g_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint G {
          get { return g_; }
          set {
            g_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 3;
        private uint b_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint B {
          get { return b_; }
          set {
            b_ = value;
          }
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 4;
        private uint a_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Color);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Color other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (R != other.R) return false;
          if (G != other.G) return false;
          if (B != other.B) return false;
          if (A != other.A) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (R != 0) hash ^= R.GetHashCode();
          if (G != 0) hash ^= G.GetHashCode();
          if (B != 0) hash ^= B.GetHashCode();
          if (A != 0) hash ^= A.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (R != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(R);
          }
          if (G != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(G);
          }
          if (B != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(B);
          }
          if (A != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(A);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (R != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
          }
          if (G != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
          }
          if (B != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
          }
          if (A != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Color other) {
          if (other == null) {
            return;
          }
          if (other.R != 0) {
            R = other.R;
          }
          if (other.G != 0) {
            G = other.G;
          }
          if (other.B != 0) {
            B = other.B;
          }
          if (other.A != 0) {
            A = other.A;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                R = input.ReadUInt32();
                break;
              }
              case 16: {
                G = input.ReadUInt32();
                break;
              }
              case 24: {
                B = input.ReadUInt32();
                break;
              }
              case 32: {
                A = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Line : pb::IMessage<Line> {
        private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Line> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Line() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Line(Line other) : this() {
          start_ = other.start_ != null ? other.start_.Clone() : null;
          end_ = other.end_ != null ? other.end_.Clone() : null;
          width_ = other.width_;
          color_ = other.color_ != null ? other.color_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Line Clone() {
          return new Line(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private global::ProtobufMsgs.CanvasObject.Types.Point start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point Start {
          get { return start_; }
          set {
            start_ = value;
          }
        }

        /// <summary>Field number for the "end" field.</summary>
        public const int EndFieldNumber = 2;
        private global::ProtobufMsgs.CanvasObject.Types.Point end_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point End {
          get { return end_; }
          set {
            end_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 4;
        private global::ProtobufMsgs.CanvasObject.Types.Color color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Color Color {
          get { return color_; }
          set {
            color_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Line);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Line other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Start, other.Start)) return false;
          if (!object.Equals(End, other.End)) return false;
          if (Width != other.Width) return false;
          if (!object.Equals(Color, other.Color)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (start_ != null) hash ^= Start.GetHashCode();
          if (end_ != null) hash ^= End.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (color_ != null) hash ^= Color.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (start_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Start);
          }
          if (end_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(End);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Width);
          }
          if (color_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (start_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
          }
          if (end_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (color_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Line other) {
          if (other == null) {
            return;
          }
          if (other.start_ != null) {
            if (start_ == null) {
              Start = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            Start.MergeFrom(other.Start);
          }
          if (other.end_ != null) {
            if (end_ == null) {
              End = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            End.MergeFrom(other.End);
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.color_ != null) {
            if (color_ == null) {
              Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
            }
            Color.MergeFrom(other.Color);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (start_ == null) {
                  Start = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(Start);
                break;
              }
              case 18: {
                if (end_ == null) {
                  End = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(End);
                break;
              }
              case 24: {
                Width = input.ReadUInt32();
                break;
              }
              case 34: {
                if (color_ == null) {
                  Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
                }
                input.ReadMessage(Color);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Rectangle : pb::IMessage<Rectangle> {
        private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle(Rectangle other) : this() {
          topLeft_ = other.topLeft_ != null ? other.topLeft_.Clone() : null;
          bottomRight_ = other.bottomRight_ != null ? other.bottomRight_.Clone() : null;
          width_ = other.width_;
          color_ = other.color_ != null ? other.color_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rectangle Clone() {
          return new Rectangle(this);
        }

        /// <summary>Field number for the "topLeft" field.</summary>
        public const int TopLeftFieldNumber = 1;
        private global::ProtobufMsgs.CanvasObject.Types.Point topLeft_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point TopLeft {
          get { return topLeft_; }
          set {
            topLeft_ = value;
          }
        }

        /// <summary>Field number for the "bottomRight" field.</summary>
        public const int BottomRightFieldNumber = 2;
        private global::ProtobufMsgs.CanvasObject.Types.Point bottomRight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point BottomRight {
          get { return bottomRight_; }
          set {
            bottomRight_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 4;
        private global::ProtobufMsgs.CanvasObject.Types.Color color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Color Color {
          get { return color_; }
          set {
            color_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TopLeft, other.TopLeft)) return false;
          if (!object.Equals(BottomRight, other.BottomRight)) return false;
          if (Width != other.Width) return false;
          if (!object.Equals(Color, other.Color)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (topLeft_ != null) hash ^= TopLeft.GetHashCode();
          if (bottomRight_ != null) hash ^= BottomRight.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (color_ != null) hash ^= Color.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (topLeft_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TopLeft);
          }
          if (bottomRight_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(BottomRight);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Width);
          }
          if (color_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (topLeft_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopLeft);
          }
          if (bottomRight_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BottomRight);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (color_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rectangle other) {
          if (other == null) {
            return;
          }
          if (other.topLeft_ != null) {
            if (topLeft_ == null) {
              TopLeft = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            TopLeft.MergeFrom(other.TopLeft);
          }
          if (other.bottomRight_ != null) {
            if (bottomRight_ == null) {
              BottomRight = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            BottomRight.MergeFrom(other.BottomRight);
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.color_ != null) {
            if (color_ == null) {
              Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
            }
            Color.MergeFrom(other.Color);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (topLeft_ == null) {
                  TopLeft = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(TopLeft);
                break;
              }
              case 18: {
                if (bottomRight_ == null) {
                  BottomRight = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(BottomRight);
                break;
              }
              case 24: {
                Width = input.ReadUInt32();
                break;
              }
              case 34: {
                if (color_ == null) {
                  Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
                }
                input.ReadMessage(Color);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Circle : pb::IMessage<Circle> {
        private static readonly pb::MessageParser<Circle> _parser = new pb::MessageParser<Circle>(() => new Circle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Circle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CanvasObject.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle(Circle other) : this() {
          center_ = other.center_ != null ? other.center_.Clone() : null;
          radius_ = other.radius_;
          width_ = other.width_;
          color_ = other.color_ != null ? other.color_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Circle Clone() {
          return new Circle(this);
        }

        /// <summary>Field number for the "center" field.</summary>
        public const int CenterFieldNumber = 1;
        private global::ProtobufMsgs.CanvasObject.Types.Point center_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Point Center {
          get { return center_; }
          set {
            center_ = value;
          }
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 2;
        private uint radius_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Radius {
          get { return radius_; }
          set {
            radius_ = value;
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 4;
        private global::ProtobufMsgs.CanvasObject.Types.Color color_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.CanvasObject.Types.Color Color {
          get { return color_; }
          set {
            color_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Circle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Circle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Center, other.Center)) return false;
          if (Radius != other.Radius) return false;
          if (Width != other.Width) return false;
          if (!object.Equals(Color, other.Color)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (center_ != null) hash ^= Center.GetHashCode();
          if (Radius != 0) hash ^= Radius.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (color_ != null) hash ^= Color.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (center_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Center);
          }
          if (Radius != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Radius);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Width);
          }
          if (color_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (center_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Center);
          }
          if (Radius != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Radius);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (color_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Circle other) {
          if (other == null) {
            return;
          }
          if (other.center_ != null) {
            if (center_ == null) {
              Center = new global::ProtobufMsgs.CanvasObject.Types.Point();
            }
            Center.MergeFrom(other.Center);
          }
          if (other.Radius != 0) {
            Radius = other.Radius;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.color_ != null) {
            if (color_ == null) {
              Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
            }
            Color.MergeFrom(other.Color);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (center_ == null) {
                  Center = new global::ProtobufMsgs.CanvasObject.Types.Point();
                }
                input.ReadMessage(Center);
                break;
              }
              case 16: {
                Radius = input.ReadUInt32();
                break;
              }
              case 24: {
                Width = input.ReadUInt32();
                break;
              }
              case 34: {
                if (color_ == null) {
                  Color = new global::ProtobufMsgs.CanvasObject.Types.Color();
                }
                input.ReadMessage(Color);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Canvas : pb::IMessage<Canvas> {
    private static readonly pb::MessageParser<Canvas> _parser = new pb::MessageParser<Canvas>(() => new Canvas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Canvas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas(Canvas other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas Clone() {
      return new Canvas(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ProtobufMsgs.CanvasObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(26, global::ProtobufMsgs.CanvasObject.Parser);
    private readonly pbc::RepeatedField<global::ProtobufMsgs.CanvasObject> objects_ = new pbc::RepeatedField<global::ProtobufMsgs.CanvasObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtobufMsgs.CanvasObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Canvas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Canvas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Canvas other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  /// The following sensor outputs are specific to the sensor type, bring your own sensor and add your own output here!
  /// </summary>
  public sealed partial class CameraSensorOutput : pb::IMessage<CameraSensorOutput> {
    private static readonly pb::MessageParser<CameraSensorOutput> _parser = new pb::MessageParser<CameraSensorOutput>(() => new CameraSensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraSensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.CameraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput(CameraSensorOutput other) : this() {
      trajectory_ = other.trajectory_ != null ? other.trajectory_.Clone() : null;
      debugFrame_ = other.debugFrame_ != null ? other.debugFrame_.Clone() : null;
      objects_ = other.objects_ != null ? other.objects_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSensorOutput Clone() {
      return new CameraSensorOutput(this);
    }

    /// <summary>Field number for the "trajectory" field.</summary>
    public const int TrajectoryFieldNumber = 1;
    private global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory trajectory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory Trajectory {
      get { return trajectory_; }
      set {
        trajectory_ = value;
      }
    }

    /// <summary>Field number for the "debug_frame" field.</summary>
    public const int DebugFrameFieldNumber = 2;
    private global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame debugFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame DebugFrame {
      get { return debugFrame_; }
      set {
        debugFrame_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 3;
    private global::ProtobufMsgs.CameraSensorOutput.Types.Objects objects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CameraSensorOutput.Types.Objects Objects {
      get { return objects_; }
      set {
        objects_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraSensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraSensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Trajectory, other.Trajectory)) return false;
      if (!object.Equals(DebugFrame, other.DebugFrame)) return false;
      if (!object.Equals(Objects, other.Objects)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trajectory_ != null) hash ^= Trajectory.GetHashCode();
      if (debugFrame_ != null) hash ^= DebugFrame.GetHashCode();
      if (objects_ != null) hash ^= Objects.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trajectory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Trajectory);
      }
      if (debugFrame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DebugFrame);
      }
      if (objects_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Objects);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trajectory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trajectory);
      }
      if (debugFrame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugFrame);
      }
      if (objects_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Objects);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraSensorOutput other) {
      if (other == null) {
        return;
      }
      if (other.trajectory_ != null) {
        if (trajectory_ == null) {
          Trajectory = new global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory();
        }
        Trajectory.MergeFrom(other.Trajectory);
      }
      if (other.debugFrame_ != null) {
        if (debugFrame_ == null) {
          DebugFrame = new global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame();
        }
        DebugFrame.MergeFrom(other.DebugFrame);
      }
      if (other.objects_ != null) {
        if (objects_ == null) {
          Objects = new global::ProtobufMsgs.CameraSensorOutput.Types.Objects();
        }
        Objects.MergeFrom(other.Objects);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trajectory_ == null) {
              Trajectory = new global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory();
            }
            input.ReadMessage(Trajectory);
            break;
          }
          case 18: {
            if (debugFrame_ == null) {
              DebugFrame = new global::ProtobufMsgs.CameraSensorOutput.Types.DebugFrame();
            }
            input.ReadMessage(DebugFrame);
            break;
          }
          case 26: {
            if (objects_ == null) {
              Objects = new global::ProtobufMsgs.CameraSensorOutput.Types.Objects();
            }
            input.ReadMessage(Objects);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CameraSensorOutput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Defined by the Path Planner
      /// </summary>
      public sealed partial class Trajectory : pb::IMessage<Trajectory> {
        private static readonly pb::MessageParser<Trajectory> _parser = new pb::MessageParser<Trajectory>(() => new Trajectory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Trajectory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CameraSensorOutput.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trajectory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trajectory(Trajectory other) : this() {
          points_ = other.points_.Clone();
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Trajectory Clone() {
          return new Trajectory(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point> _repeated_points_codec
            = pb::FieldCodec.ForMessage(10, global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point.Parser);
        private readonly pbc::RepeatedField<global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point> points_ = new pbc::RepeatedField<global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Types.Point> Points {
          get { return points_; }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 2;
        private uint width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;
        private uint height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Trajectory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Trajectory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          points_.WriteTo(output, _repeated_points_codec);
          if (Width != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Trajectory other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
              case 16: {
                Width = input.ReadUInt32();
                break;
              }
              case 24: {
                Height = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Trajectory message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Point : pb::IMessage<Point> {
            private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Point> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::ProtobufMsgs.CameraSensorOutput.Types.Trajectory.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point(Point other) : this() {
              x_ = other.x_;
              y_ = other.y_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Point Clone() {
              return new Point(this);
            }

            /// <summary>Field number for the "x" field.</summary>
            public const int XFieldNumber = 1;
            private int x_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            /// <summary>Field number for the "y" field.</summary>
            public const int YFieldNumber = 2;
            private int y_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Point);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Point other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (X != other.X) return false;
              if (Y != other.Y) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (X != 0) hash ^= X.GetHashCode();
              if (Y != 0) hash ^= Y.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(X);
              }
              if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Y);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
              }
              if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Point other) {
              if (other == null) {
                return;
              }
              if (other.X != 0) {
                X = other.X;
              }
              if (other.Y != 0) {
                Y = other.Y;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    X = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Y = input.ReadInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class DebugFrame : pb::IMessage<DebugFrame> {
        private static readonly pb::MessageParser<DebugFrame> _parser = new pb::MessageParser<DebugFrame>(() => new DebugFrame());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DebugFrame> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CameraSensorOutput.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DebugFrame() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DebugFrame(DebugFrame other) : this() {
          jpeg_ = other.jpeg_;
          canvas_ = other.canvas_ != null ? other.canvas_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DebugFrame Clone() {
          return new DebugFrame(this);
        }

        /// <summary>Field number for the "jpeg" field.</summary>
        public const int JpegFieldNumber = 1;
        private pb::ByteString jpeg_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Jpeg {
          get { return jpeg_; }
          set {
            jpeg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "canvas" field.</summary>
        public const int CanvasFieldNumber = 5;
        private global::ProtobufMsgs.Canvas canvas_;
        /// <summary>
        /// if image livestreaming is disabled, or imaging module wants to draw additional information on the image, it can be done here
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ProtobufMsgs.Canvas Canvas {
          get { return canvas_; }
          set {
            canvas_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DebugFrame);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DebugFrame other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Jpeg != other.Jpeg) return false;
          if (!object.Equals(Canvas, other.Canvas)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Jpeg.Length != 0) hash ^= Jpeg.GetHashCode();
          if (canvas_ != null) hash ^= Canvas.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Jpeg.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Jpeg);
          }
          if (canvas_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Canvas);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Jpeg.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Jpeg);
          }
          if (canvas_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Canvas);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DebugFrame other) {
          if (other == null) {
            return;
          }
          if (other.Jpeg.Length != 0) {
            Jpeg = other.Jpeg;
          }
          if (other.canvas_ != null) {
            if (canvas_ == null) {
              Canvas = new global::ProtobufMsgs.Canvas();
            }
            Canvas.MergeFrom(other.Canvas);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Jpeg = input.ReadBytes();
                break;
              }
              case 42: {
                if (canvas_ == null) {
                  Canvas = new global::ProtobufMsgs.Canvas();
                }
                input.ReadMessage(Canvas);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Objects : pb::IMessage<Objects> {
        private static readonly pb::MessageParser<Objects> _parser = new pb::MessageParser<Objects>(() => new Objects());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Objects> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.CameraSensorOutput.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objects() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objects(Objects other) : this() {
          items_ = other.items_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objects Clone() {
          return new Objects(this);
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::ProtobufMsgs.DetectedObjects> _repeated_items_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::ProtobufMsgs.DetectedObjects) x);
        private readonly pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects> items_ = new pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ProtobufMsgs.DetectedObjects> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Objects);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Objects other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!items_.Equals(other.items_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= items_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Objects other) {
          if (other == null) {
            return;
          }
          items_.Add(other.items_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
