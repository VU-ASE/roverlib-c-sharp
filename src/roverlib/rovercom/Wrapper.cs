// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/wrapper.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/wrapper.proto</summary>
  public static partial class WrapperReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/wrapper.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WrapperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVvdXRwdXRzL3dyYXBwZXIucHJvdG8SDXByb3RvYnVmX21zZ3MaFG91dHB1",
            "dHMvY2FtZXJhLnByb3RvGhZvdXRwdXRzL2Rpc3RhbmNlLnByb3RvGhNvdXRw",
            "dXRzL3NwZWVkLnByb3RvGhhvdXRwdXRzL2NvbnRyb2xsZXIucHJvdG8aEW91",
            "dHB1dHMvaW11LnByb3RvGhVvdXRwdXRzL2JhdHRlcnkucHJvdG8aEW91dHB1",
            "dHMvcnBtLnByb3RvGhFvdXRwdXRzL2x1eC5wcm90bxoVb3V0cHV0cy9sYXB0",
            "aW1lLnByb3RvGhVvdXRwdXRzL2dlbmVyaWMucHJvdG8aE291dHB1dHMvbGlk",
            "YXIucHJvdG8aFG91dHB1dHMvZW5lcmd5LnByb3RvIosJCgxTZW5zb3JPdXRw",
            "dXQSEAoIc2Vuc29ySWQYASABKA0SEQoJdGltZXN0YW1wGAIgASgEEg4KBnN0",
            "YXR1cxgDIAEoDRI5CgxjYW1lcmFPdXRwdXQYBCABKAsyIS5wcm90b2J1Zl9t",
            "c2dzLkNhbWVyYVNlbnNvck91dHB1dEgAEj0KDmRpc3RhbmNlT3V0cHV0GAUg",
            "ASgLMiMucHJvdG9idWZfbXNncy5EaXN0YW5jZVNlbnNvck91dHB1dEgAEjcK",
            "C3NwZWVkT3V0cHV0GAYgASgLMiAucHJvdG9idWZfbXNncy5TcGVlZFNlbnNv",
            "ck91dHB1dEgAEjsKEGNvbnRyb2xsZXJPdXRwdXQYByABKAsyHy5wcm90b2J1",
            "Zl9tc2dzLkNvbnRyb2xsZXJPdXRwdXRIABIzCglpbXVPdXRwdXQYCCABKAsy",
            "Hi5wcm90b2J1Zl9tc2dzLkltdVNlbnNvck91dHB1dEgAEjsKDWJhdHRlcnlP",
            "dXRwdXQYCSABKAsyIi5wcm90b2J1Zl9tc2dzLkJhdHRlcnlTZW5zb3JPdXRw",
            "dXRIABIzCglycG1PdXRwdXQYCiABKAsyHi5wcm90b2J1Zl9tc2dzLlJwbVNl",
            "bnNvck91dHB1dEgAEjMKCWx1eE91dHB1dBgLIAEoCzIeLnByb3RvYnVmX21z",
            "Z3MuTHV4U2Vuc29yT3V0cHV0SAASOwoQZ2VuZXJpY0ludFNjYWxhchgNIAEo",
            "CzIfLnByb3RvYnVmX21zZ3MuR2VuZXJpY0ludFNjYWxhckgAEj8KEmdlbmVy",
            "aWNGbG9hdFNjYWxhchgOIAEoCzIhLnByb3RvYnVmX21zZ3MuR2VuZXJpY0Zs",
            "b2F0U2NhbGFySAASPQoRZ2VuZXJpY0Jvb2xTY2FsYXIYDyABKAsyIC5wcm90",
            "b2J1Zl9tc2dzLkdlbmVyaWNCb29sU2NhbGFySAASQQoTZ2VuZXJpY1N0cmlu",
            "Z1NjYWxhchgQIAEoCzIiLnByb3RvYnVmX21zZ3MuR2VuZXJpY1N0cmluZ1Nj",
            "YWxhckgAEjkKD2dlbmVyaWNJbnRBcnJheRgRIAEoCzIeLnByb3RvYnVmX21z",
            "Z3MuR2VuZXJpY0ludEFycmF5SAASPQoRZ2VuZXJpY0Zsb2F0QXJyYXkYEiAB",
            "KAsyIC5wcm90b2J1Zl9tc2dzLkdlbmVyaWNGbG9hdEFycmF5SAASOwoQZ2Vu",
            "ZXJpY0Jvb2xBcnJheRgTIAEoCzIfLnByb3RvYnVmX21zZ3MuR2VuZXJpY0Jv",
            "b2xBcnJheUgAEj8KEmdlbmVyaWNTdHJpbmdBcnJheRgUIAEoCzIhLnByb3Rv",
            "YnVmX21zZ3MuR2VuZXJpY1N0cmluZ0FycmF5SAASNwoLbGlkYXJPdXRwdXQY",
            "FSABKAsyIC5wcm90b2J1Zl9tc2dzLkxpZGFyU2Vuc29yT3V0cHV0SAASOQoM",
            "ZW5lcmd5T3V0cHV0GBYgASgLMiEucHJvdG9idWZfbXNncy5FbmVyZ3lTZW5z",
            "b3JPdXRwdXRIAEIOCgxzZW5zb3JPdXRwdXRCEFoOYXNlL3BiX291dHB1dHNi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ProtobufMsgs.CameraReflection.Descriptor, global::ProtobufMsgs.DistanceReflection.Descriptor, global::ProtobufMsgs.SpeedReflection.Descriptor, global::ProtobufMsgs.ControllerReflection.Descriptor, global::ProtobufMsgs.ImuReflection.Descriptor, global::ProtobufMsgs.BatteryReflection.Descriptor, global::ProtobufMsgs.RpmReflection.Descriptor, global::ProtobufMsgs.LuxReflection.Descriptor, global::ProtobufMsgs.LaptimeReflection.Descriptor, global::ProtobufMsgs.GenericReflection.Descriptor, global::ProtobufMsgs.LidarReflection.Descriptor, global::ProtobufMsgs.EnergyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.SensorOutput), global::ProtobufMsgs.SensorOutput.Parser, new[]{ "SensorId", "Timestamp", "Status", "CameraOutput", "DistanceOutput", "SpeedOutput", "ControllerOutput", "ImuOutput", "BatteryOutput", "RpmOutput", "LuxOutput", "GenericIntScalar", "GenericFloatScalar", "GenericBoolScalar", "GenericStringScalar", "GenericIntArray", "GenericFloatArray", "GenericBoolArray", "GenericStringArray", "LidarOutput", "EnergyOutput" }, new[]{ "SensorOutput" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SensorOutput : pb::IMessage<SensorOutput> {
    private static readonly pb::MessageParser<SensorOutput> _parser = new pb::MessageParser<SensorOutput>(() => new SensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.WrapperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorOutput(SensorOutput other) : this() {
      sensorId_ = other.sensorId_;
      timestamp_ = other.timestamp_;
      status_ = other.status_;
      switch (other.SensorOutputCase) {
        case SensorOutputOneofCase.CameraOutput:
          CameraOutput = other.CameraOutput.Clone();
          break;
        case SensorOutputOneofCase.DistanceOutput:
          DistanceOutput = other.DistanceOutput.Clone();
          break;
        case SensorOutputOneofCase.SpeedOutput:
          SpeedOutput = other.SpeedOutput.Clone();
          break;
        case SensorOutputOneofCase.ControllerOutput:
          ControllerOutput = other.ControllerOutput.Clone();
          break;
        case SensorOutputOneofCase.ImuOutput:
          ImuOutput = other.ImuOutput.Clone();
          break;
        case SensorOutputOneofCase.BatteryOutput:
          BatteryOutput = other.BatteryOutput.Clone();
          break;
        case SensorOutputOneofCase.RpmOutput:
          RpmOutput = other.RpmOutput.Clone();
          break;
        case SensorOutputOneofCase.LuxOutput:
          LuxOutput = other.LuxOutput.Clone();
          break;
        case SensorOutputOneofCase.GenericIntScalar:
          GenericIntScalar = other.GenericIntScalar.Clone();
          break;
        case SensorOutputOneofCase.GenericFloatScalar:
          GenericFloatScalar = other.GenericFloatScalar.Clone();
          break;
        case SensorOutputOneofCase.GenericBoolScalar:
          GenericBoolScalar = other.GenericBoolScalar.Clone();
          break;
        case SensorOutputOneofCase.GenericStringScalar:
          GenericStringScalar = other.GenericStringScalar.Clone();
          break;
        case SensorOutputOneofCase.GenericIntArray:
          GenericIntArray = other.GenericIntArray.Clone();
          break;
        case SensorOutputOneofCase.GenericFloatArray:
          GenericFloatArray = other.GenericFloatArray.Clone();
          break;
        case SensorOutputOneofCase.GenericBoolArray:
          GenericBoolArray = other.GenericBoolArray.Clone();
          break;
        case SensorOutputOneofCase.GenericStringArray:
          GenericStringArray = other.GenericStringArray.Clone();
          break;
        case SensorOutputOneofCase.LidarOutput:
          LidarOutput = other.LidarOutput.Clone();
          break;
        case SensorOutputOneofCase.EnergyOutput:
          EnergyOutput = other.EnergyOutput.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorOutput Clone() {
      return new SensorOutput(this);
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 1;
    private uint sensorId_;
    /// <summary>
    /// Every sensor has a unique ID to support multiple sensors of the same type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    /// Add a timestamp to the output to make debugging, logging and synchronisation easier
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private uint status_;
    /// <summary>
    /// Report an error if the sensor is not working correctly (controller can decide to ignore or stop the car)
    /// 0 = no error, any other value = error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cameraOutput" field.</summary>
    public const int CameraOutputFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.CameraSensorOutput CameraOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.CameraOutput ? (global::ProtobufMsgs.CameraSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.CameraOutput;
      }
    }

    /// <summary>Field number for the "distanceOutput" field.</summary>
    public const int DistanceOutputFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.DistanceSensorOutput DistanceOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.DistanceOutput ? (global::ProtobufMsgs.DistanceSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.DistanceOutput;
      }
    }

    /// <summary>Field number for the "speedOutput" field.</summary>
    public const int SpeedOutputFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.SpeedSensorOutput SpeedOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.SpeedOutput ? (global::ProtobufMsgs.SpeedSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.SpeedOutput;
      }
    }

    /// <summary>Field number for the "controllerOutput" field.</summary>
    public const int ControllerOutputFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.ControllerOutput ControllerOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.ControllerOutput ? (global::ProtobufMsgs.ControllerOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.ControllerOutput;
      }
    }

    /// <summary>Field number for the "imuOutput" field.</summary>
    public const int ImuOutputFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.ImuSensorOutput ImuOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.ImuOutput ? (global::ProtobufMsgs.ImuSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.ImuOutput;
      }
    }

    /// <summary>Field number for the "batteryOutput" field.</summary>
    public const int BatteryOutputFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.BatterySensorOutput BatteryOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.BatteryOutput ? (global::ProtobufMsgs.BatterySensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.BatteryOutput;
      }
    }

    /// <summary>Field number for the "rpmOutput" field.</summary>
    public const int RpmOutputFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.RpmSensorOutput RpmOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.RpmOutput ? (global::ProtobufMsgs.RpmSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.RpmOutput;
      }
    }

    /// <summary>Field number for the "luxOutput" field.</summary>
    public const int LuxOutputFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.LuxSensorOutput LuxOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.LuxOutput ? (global::ProtobufMsgs.LuxSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.LuxOutput;
      }
    }

    /// <summary>Field number for the "genericIntScalar" field.</summary>
    public const int GenericIntScalarFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericIntScalar GenericIntScalar {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericIntScalar ? (global::ProtobufMsgs.GenericIntScalar) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericIntScalar;
      }
    }

    /// <summary>Field number for the "genericFloatScalar" field.</summary>
    public const int GenericFloatScalarFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericFloatScalar GenericFloatScalar {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericFloatScalar ? (global::ProtobufMsgs.GenericFloatScalar) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericFloatScalar;
      }
    }

    /// <summary>Field number for the "genericBoolScalar" field.</summary>
    public const int GenericBoolScalarFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericBoolScalar GenericBoolScalar {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericBoolScalar ? (global::ProtobufMsgs.GenericBoolScalar) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericBoolScalar;
      }
    }

    /// <summary>Field number for the "genericStringScalar" field.</summary>
    public const int GenericStringScalarFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericStringScalar GenericStringScalar {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericStringScalar ? (global::ProtobufMsgs.GenericStringScalar) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericStringScalar;
      }
    }

    /// <summary>Field number for the "genericIntArray" field.</summary>
    public const int GenericIntArrayFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericIntArray GenericIntArray {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericIntArray ? (global::ProtobufMsgs.GenericIntArray) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericIntArray;
      }
    }

    /// <summary>Field number for the "genericFloatArray" field.</summary>
    public const int GenericFloatArrayFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericFloatArray GenericFloatArray {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericFloatArray ? (global::ProtobufMsgs.GenericFloatArray) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericFloatArray;
      }
    }

    /// <summary>Field number for the "genericBoolArray" field.</summary>
    public const int GenericBoolArrayFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericBoolArray GenericBoolArray {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericBoolArray ? (global::ProtobufMsgs.GenericBoolArray) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericBoolArray;
      }
    }

    /// <summary>Field number for the "genericStringArray" field.</summary>
    public const int GenericStringArrayFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.GenericStringArray GenericStringArray {
      get { return sensorOutputCase_ == SensorOutputOneofCase.GenericStringArray ? (global::ProtobufMsgs.GenericStringArray) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.GenericStringArray;
      }
    }

    /// <summary>Field number for the "lidarOutput" field.</summary>
    public const int LidarOutputFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.LidarSensorOutput LidarOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.LidarOutput ? (global::ProtobufMsgs.LidarSensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.LidarOutput;
      }
    }

    /// <summary>Field number for the "energyOutput" field.</summary>
    public const int EnergyOutputFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.EnergySensorOutput EnergyOutput {
      get { return sensorOutputCase_ == SensorOutputOneofCase.EnergyOutput ? (global::ProtobufMsgs.EnergySensorOutput) sensorOutput_ : null; }
      set {
        sensorOutput_ = value;
        sensorOutputCase_ = value == null ? SensorOutputOneofCase.None : SensorOutputOneofCase.EnergyOutput;
      }
    }

    private object sensorOutput_;
    /// <summary>Enum of possible cases for the "sensorOutput" oneof.</summary>
    public enum SensorOutputOneofCase {
      None = 0,
      CameraOutput = 4,
      DistanceOutput = 5,
      SpeedOutput = 6,
      ControllerOutput = 7,
      ImuOutput = 8,
      BatteryOutput = 9,
      RpmOutput = 10,
      LuxOutput = 11,
      GenericIntScalar = 13,
      GenericFloatScalar = 14,
      GenericBoolScalar = 15,
      GenericStringScalar = 16,
      GenericIntArray = 17,
      GenericFloatArray = 18,
      GenericBoolArray = 19,
      GenericStringArray = 20,
      LidarOutput = 21,
      EnergyOutput = 22,
    }
    private SensorOutputOneofCase sensorOutputCase_ = SensorOutputOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorOutputOneofCase SensorOutputCase {
      get { return sensorOutputCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSensorOutput() {
      sensorOutputCase_ = SensorOutputOneofCase.None;
      sensorOutput_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorId != other.SensorId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(CameraOutput, other.CameraOutput)) return false;
      if (!object.Equals(DistanceOutput, other.DistanceOutput)) return false;
      if (!object.Equals(SpeedOutput, other.SpeedOutput)) return false;
      if (!object.Equals(ControllerOutput, other.ControllerOutput)) return false;
      if (!object.Equals(ImuOutput, other.ImuOutput)) return false;
      if (!object.Equals(BatteryOutput, other.BatteryOutput)) return false;
      if (!object.Equals(RpmOutput, other.RpmOutput)) return false;
      if (!object.Equals(LuxOutput, other.LuxOutput)) return false;
      if (!object.Equals(GenericIntScalar, other.GenericIntScalar)) return false;
      if (!object.Equals(GenericFloatScalar, other.GenericFloatScalar)) return false;
      if (!object.Equals(GenericBoolScalar, other.GenericBoolScalar)) return false;
      if (!object.Equals(GenericStringScalar, other.GenericStringScalar)) return false;
      if (!object.Equals(GenericIntArray, other.GenericIntArray)) return false;
      if (!object.Equals(GenericFloatArray, other.GenericFloatArray)) return false;
      if (!object.Equals(GenericBoolArray, other.GenericBoolArray)) return false;
      if (!object.Equals(GenericStringArray, other.GenericStringArray)) return false;
      if (!object.Equals(LidarOutput, other.LidarOutput)) return false;
      if (!object.Equals(EnergyOutput, other.EnergyOutput)) return false;
      if (SensorOutputCase != other.SensorOutputCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorId != 0) hash ^= SensorId.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.CameraOutput) hash ^= CameraOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.DistanceOutput) hash ^= DistanceOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.SpeedOutput) hash ^= SpeedOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.ControllerOutput) hash ^= ControllerOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.ImuOutput) hash ^= ImuOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.BatteryOutput) hash ^= BatteryOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.RpmOutput) hash ^= RpmOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.LuxOutput) hash ^= LuxOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntScalar) hash ^= GenericIntScalar.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatScalar) hash ^= GenericFloatScalar.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolScalar) hash ^= GenericBoolScalar.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringScalar) hash ^= GenericStringScalar.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntArray) hash ^= GenericIntArray.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatArray) hash ^= GenericFloatArray.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolArray) hash ^= GenericBoolArray.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringArray) hash ^= GenericStringArray.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.LidarOutput) hash ^= LidarOutput.GetHashCode();
      if (sensorOutputCase_ == SensorOutputOneofCase.EnergyOutput) hash ^= EnergyOutput.GetHashCode();
      hash ^= (int) sensorOutputCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SensorId);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Status);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.CameraOutput) {
        output.WriteRawTag(34);
        output.WriteMessage(CameraOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.DistanceOutput) {
        output.WriteRawTag(42);
        output.WriteMessage(DistanceOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.SpeedOutput) {
        output.WriteRawTag(50);
        output.WriteMessage(SpeedOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.ControllerOutput) {
        output.WriteRawTag(58);
        output.WriteMessage(ControllerOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.ImuOutput) {
        output.WriteRawTag(66);
        output.WriteMessage(ImuOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.BatteryOutput) {
        output.WriteRawTag(74);
        output.WriteMessage(BatteryOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.RpmOutput) {
        output.WriteRawTag(82);
        output.WriteMessage(RpmOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.LuxOutput) {
        output.WriteRawTag(90);
        output.WriteMessage(LuxOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntScalar) {
        output.WriteRawTag(106);
        output.WriteMessage(GenericIntScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatScalar) {
        output.WriteRawTag(114);
        output.WriteMessage(GenericFloatScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolScalar) {
        output.WriteRawTag(122);
        output.WriteMessage(GenericBoolScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringScalar) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(GenericStringScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntArray) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GenericIntArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatArray) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(GenericFloatArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolArray) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GenericBoolArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringArray) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(GenericStringArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.LidarOutput) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LidarOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.EnergyOutput) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(EnergyOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SensorId);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.CameraOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.DistanceOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistanceOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.SpeedOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpeedOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.ControllerOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControllerOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.ImuOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImuOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.BatteryOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatteryOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.RpmOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RpmOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.LuxOutput) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LuxOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntScalar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericIntScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatScalar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericFloatScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolScalar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenericBoolScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringScalar) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GenericStringScalar);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntArray) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GenericIntArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatArray) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GenericFloatArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolArray) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GenericBoolArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringArray) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GenericStringArray);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.LidarOutput) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LidarOutput);
      }
      if (sensorOutputCase_ == SensorOutputOneofCase.EnergyOutput) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnergyOutput);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorOutput other) {
      if (other == null) {
        return;
      }
      if (other.SensorId != 0) {
        SensorId = other.SensorId;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      switch (other.SensorOutputCase) {
        case SensorOutputOneofCase.CameraOutput:
          if (CameraOutput == null) {
            CameraOutput = new global::ProtobufMsgs.CameraSensorOutput();
          }
          CameraOutput.MergeFrom(other.CameraOutput);
          break;
        case SensorOutputOneofCase.DistanceOutput:
          if (DistanceOutput == null) {
            DistanceOutput = new global::ProtobufMsgs.DistanceSensorOutput();
          }
          DistanceOutput.MergeFrom(other.DistanceOutput);
          break;
        case SensorOutputOneofCase.SpeedOutput:
          if (SpeedOutput == null) {
            SpeedOutput = new global::ProtobufMsgs.SpeedSensorOutput();
          }
          SpeedOutput.MergeFrom(other.SpeedOutput);
          break;
        case SensorOutputOneofCase.ControllerOutput:
          if (ControllerOutput == null) {
            ControllerOutput = new global::ProtobufMsgs.ControllerOutput();
          }
          ControllerOutput.MergeFrom(other.ControllerOutput);
          break;
        case SensorOutputOneofCase.ImuOutput:
          if (ImuOutput == null) {
            ImuOutput = new global::ProtobufMsgs.ImuSensorOutput();
          }
          ImuOutput.MergeFrom(other.ImuOutput);
          break;
        case SensorOutputOneofCase.BatteryOutput:
          if (BatteryOutput == null) {
            BatteryOutput = new global::ProtobufMsgs.BatterySensorOutput();
          }
          BatteryOutput.MergeFrom(other.BatteryOutput);
          break;
        case SensorOutputOneofCase.RpmOutput:
          if (RpmOutput == null) {
            RpmOutput = new global::ProtobufMsgs.RpmSensorOutput();
          }
          RpmOutput.MergeFrom(other.RpmOutput);
          break;
        case SensorOutputOneofCase.LuxOutput:
          if (LuxOutput == null) {
            LuxOutput = new global::ProtobufMsgs.LuxSensorOutput();
          }
          LuxOutput.MergeFrom(other.LuxOutput);
          break;
        case SensorOutputOneofCase.GenericIntScalar:
          if (GenericIntScalar == null) {
            GenericIntScalar = new global::ProtobufMsgs.GenericIntScalar();
          }
          GenericIntScalar.MergeFrom(other.GenericIntScalar);
          break;
        case SensorOutputOneofCase.GenericFloatScalar:
          if (GenericFloatScalar == null) {
            GenericFloatScalar = new global::ProtobufMsgs.GenericFloatScalar();
          }
          GenericFloatScalar.MergeFrom(other.GenericFloatScalar);
          break;
        case SensorOutputOneofCase.GenericBoolScalar:
          if (GenericBoolScalar == null) {
            GenericBoolScalar = new global::ProtobufMsgs.GenericBoolScalar();
          }
          GenericBoolScalar.MergeFrom(other.GenericBoolScalar);
          break;
        case SensorOutputOneofCase.GenericStringScalar:
          if (GenericStringScalar == null) {
            GenericStringScalar = new global::ProtobufMsgs.GenericStringScalar();
          }
          GenericStringScalar.MergeFrom(other.GenericStringScalar);
          break;
        case SensorOutputOneofCase.GenericIntArray:
          if (GenericIntArray == null) {
            GenericIntArray = new global::ProtobufMsgs.GenericIntArray();
          }
          GenericIntArray.MergeFrom(other.GenericIntArray);
          break;
        case SensorOutputOneofCase.GenericFloatArray:
          if (GenericFloatArray == null) {
            GenericFloatArray = new global::ProtobufMsgs.GenericFloatArray();
          }
          GenericFloatArray.MergeFrom(other.GenericFloatArray);
          break;
        case SensorOutputOneofCase.GenericBoolArray:
          if (GenericBoolArray == null) {
            GenericBoolArray = new global::ProtobufMsgs.GenericBoolArray();
          }
          GenericBoolArray.MergeFrom(other.GenericBoolArray);
          break;
        case SensorOutputOneofCase.GenericStringArray:
          if (GenericStringArray == null) {
            GenericStringArray = new global::ProtobufMsgs.GenericStringArray();
          }
          GenericStringArray.MergeFrom(other.GenericStringArray);
          break;
        case SensorOutputOneofCase.LidarOutput:
          if (LidarOutput == null) {
            LidarOutput = new global::ProtobufMsgs.LidarSensorOutput();
          }
          LidarOutput.MergeFrom(other.LidarOutput);
          break;
        case SensorOutputOneofCase.EnergyOutput:
          if (EnergyOutput == null) {
            EnergyOutput = new global::ProtobufMsgs.EnergySensorOutput();
          }
          EnergyOutput.MergeFrom(other.EnergyOutput);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            Status = input.ReadUInt32();
            break;
          }
          case 34: {
            global::ProtobufMsgs.CameraSensorOutput subBuilder = new global::ProtobufMsgs.CameraSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.CameraOutput) {
              subBuilder.MergeFrom(CameraOutput);
            }
            input.ReadMessage(subBuilder);
            CameraOutput = subBuilder;
            break;
          }
          case 42: {
            global::ProtobufMsgs.DistanceSensorOutput subBuilder = new global::ProtobufMsgs.DistanceSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.DistanceOutput) {
              subBuilder.MergeFrom(DistanceOutput);
            }
            input.ReadMessage(subBuilder);
            DistanceOutput = subBuilder;
            break;
          }
          case 50: {
            global::ProtobufMsgs.SpeedSensorOutput subBuilder = new global::ProtobufMsgs.SpeedSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.SpeedOutput) {
              subBuilder.MergeFrom(SpeedOutput);
            }
            input.ReadMessage(subBuilder);
            SpeedOutput = subBuilder;
            break;
          }
          case 58: {
            global::ProtobufMsgs.ControllerOutput subBuilder = new global::ProtobufMsgs.ControllerOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.ControllerOutput) {
              subBuilder.MergeFrom(ControllerOutput);
            }
            input.ReadMessage(subBuilder);
            ControllerOutput = subBuilder;
            break;
          }
          case 66: {
            global::ProtobufMsgs.ImuSensorOutput subBuilder = new global::ProtobufMsgs.ImuSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.ImuOutput) {
              subBuilder.MergeFrom(ImuOutput);
            }
            input.ReadMessage(subBuilder);
            ImuOutput = subBuilder;
            break;
          }
          case 74: {
            global::ProtobufMsgs.BatterySensorOutput subBuilder = new global::ProtobufMsgs.BatterySensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.BatteryOutput) {
              subBuilder.MergeFrom(BatteryOutput);
            }
            input.ReadMessage(subBuilder);
            BatteryOutput = subBuilder;
            break;
          }
          case 82: {
            global::ProtobufMsgs.RpmSensorOutput subBuilder = new global::ProtobufMsgs.RpmSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.RpmOutput) {
              subBuilder.MergeFrom(RpmOutput);
            }
            input.ReadMessage(subBuilder);
            RpmOutput = subBuilder;
            break;
          }
          case 90: {
            global::ProtobufMsgs.LuxSensorOutput subBuilder = new global::ProtobufMsgs.LuxSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.LuxOutput) {
              subBuilder.MergeFrom(LuxOutput);
            }
            input.ReadMessage(subBuilder);
            LuxOutput = subBuilder;
            break;
          }
          case 106: {
            global::ProtobufMsgs.GenericIntScalar subBuilder = new global::ProtobufMsgs.GenericIntScalar();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntScalar) {
              subBuilder.MergeFrom(GenericIntScalar);
            }
            input.ReadMessage(subBuilder);
            GenericIntScalar = subBuilder;
            break;
          }
          case 114: {
            global::ProtobufMsgs.GenericFloatScalar subBuilder = new global::ProtobufMsgs.GenericFloatScalar();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatScalar) {
              subBuilder.MergeFrom(GenericFloatScalar);
            }
            input.ReadMessage(subBuilder);
            GenericFloatScalar = subBuilder;
            break;
          }
          case 122: {
            global::ProtobufMsgs.GenericBoolScalar subBuilder = new global::ProtobufMsgs.GenericBoolScalar();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolScalar) {
              subBuilder.MergeFrom(GenericBoolScalar);
            }
            input.ReadMessage(subBuilder);
            GenericBoolScalar = subBuilder;
            break;
          }
          case 130: {
            global::ProtobufMsgs.GenericStringScalar subBuilder = new global::ProtobufMsgs.GenericStringScalar();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringScalar) {
              subBuilder.MergeFrom(GenericStringScalar);
            }
            input.ReadMessage(subBuilder);
            GenericStringScalar = subBuilder;
            break;
          }
          case 138: {
            global::ProtobufMsgs.GenericIntArray subBuilder = new global::ProtobufMsgs.GenericIntArray();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericIntArray) {
              subBuilder.MergeFrom(GenericIntArray);
            }
            input.ReadMessage(subBuilder);
            GenericIntArray = subBuilder;
            break;
          }
          case 146: {
            global::ProtobufMsgs.GenericFloatArray subBuilder = new global::ProtobufMsgs.GenericFloatArray();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericFloatArray) {
              subBuilder.MergeFrom(GenericFloatArray);
            }
            input.ReadMessage(subBuilder);
            GenericFloatArray = subBuilder;
            break;
          }
          case 154: {
            global::ProtobufMsgs.GenericBoolArray subBuilder = new global::ProtobufMsgs.GenericBoolArray();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericBoolArray) {
              subBuilder.MergeFrom(GenericBoolArray);
            }
            input.ReadMessage(subBuilder);
            GenericBoolArray = subBuilder;
            break;
          }
          case 162: {
            global::ProtobufMsgs.GenericStringArray subBuilder = new global::ProtobufMsgs.GenericStringArray();
            if (sensorOutputCase_ == SensorOutputOneofCase.GenericStringArray) {
              subBuilder.MergeFrom(GenericStringArray);
            }
            input.ReadMessage(subBuilder);
            GenericStringArray = subBuilder;
            break;
          }
          case 170: {
            global::ProtobufMsgs.LidarSensorOutput subBuilder = new global::ProtobufMsgs.LidarSensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.LidarOutput) {
              subBuilder.MergeFrom(LidarOutput);
            }
            input.ReadMessage(subBuilder);
            LidarOutput = subBuilder;
            break;
          }
          case 178: {
            global::ProtobufMsgs.EnergySensorOutput subBuilder = new global::ProtobufMsgs.EnergySensorOutput();
            if (sensorOutputCase_ == SensorOutputOneofCase.EnergyOutput) {
              subBuilder.MergeFrom(EnergyOutput);
            }
            input.ReadMessage(subBuilder);
            EnergyOutput = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
