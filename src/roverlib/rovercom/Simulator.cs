// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: simulator/simulator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from simulator/simulator.proto</summary>
  public static partial class SimulatorReflection {

    #region Descriptor
    /// <summary>File descriptor for simulator/simulator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SimulatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlzaW11bGF0b3Ivc2ltdWxhdG9yLnByb3RvEg1wcm90b2J1Zl9tc2dzIkUK",
            "FFNpbXVsYXRvckltYWdlT3V0cHV0Eg0KBXdpZHRoGAIgASgNEg4KBmhlaWdo",
            "dBgDIAEoDRIOCgZwaXhlbHMYBCABKAwijQEKDlNpbXVsYXRvclN0YXRlEg0K",
            "BXNwZWVkGAEgASgCEhcKD3doZWVsX29mZl90cmFjaxgCIAMoCBIyCgVpbWFn",
            "ZRgDIAEoCzIjLnByb3RvYnVmX21zZ3MuU2ltdWxhdG9ySW1hZ2VPdXRwdXQS",
            "CwoDcG9zGAQgAygCEhIKCmlzRHJpZnRpbmcYBSABKAgqQAoJU2ltU3RhdHVz",
            "Eg4KClNJTV9QQVVTRUQQABIQCgxTSU1fUkVRX1NURVAQARIRCg1TSU1fUkVR",
            "X1JFU0VUEAJCG1oZYXNlL3BiX3NpbXVsYXRvcl9tZXNzYWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtobufMsgs.SimStatus), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.SimulatorImageOutput), global::ProtobufMsgs.SimulatorImageOutput.Parser, new[]{ "Width", "Height", "Pixels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.SimulatorState), global::ProtobufMsgs.SimulatorState.Parser, new[]{ "Speed", "WheelOffTrack", "Image", "Pos", "IsDrifting" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Possible Sim Requests. Useful for interfaces with Gym
  /// </summary>
  public enum SimStatus {
    /// <summary>
    /// Simulator is paused 
    /// </summary>
    [pbr::OriginalName("SIM_PAUSED")] SimPaused = 0,
    /// <summary>
    /// Request single step 
    /// </summary>
    [pbr::OriginalName("SIM_REQ_STEP")] SimReqStep = 1,
    /// <summary>
    /// Request hard reset 
    /// </summary>
    [pbr::OriginalName("SIM_REQ_RESET")] SimReqReset = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Simulator sensor outputs.
  /// </summary>
  public sealed partial class SimulatorImageOutput : pb::IMessage<SimulatorImageOutput> {
    private static readonly pb::MessageParser<SimulatorImageOutput> _parser = new pb::MessageParser<SimulatorImageOutput>(() => new SimulatorImageOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulatorImageOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.SimulatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorImageOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorImageOutput(SimulatorImageOutput other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      pixels_ = other.pixels_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorImageOutput Clone() {
      return new SimulatorImageOutput(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "pixels" field.</summary>
    public const int PixelsFieldNumber = 4;
    private pb::ByteString pixels_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Pixels {
      get { return pixels_; }
      set {
        pixels_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulatorImageOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulatorImageOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Pixels != other.Pixels) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Pixels.Length != 0) hash ^= Pixels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Pixels.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Pixels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Pixels.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pixels);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulatorImageOutput other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Pixels.Length != 0) {
        Pixels = other.Pixels;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Width = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 34: {
            Pixels = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Generic state of Simulator
  /// </summary>
  public sealed partial class SimulatorState : pb::IMessage<SimulatorState> {
    private static readonly pb::MessageParser<SimulatorState> _parser = new pb::MessageParser<SimulatorState>(() => new SimulatorState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimulatorState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.SimulatorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorState(SimulatorState other) : this() {
      speed_ = other.speed_;
      wheelOffTrack_ = other.wheelOffTrack_.Clone();
      image_ = other.image_ != null ? other.image_.Clone() : null;
      pos_ = other.pos_.Clone();
      isDrifting_ = other.isDrifting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimulatorState Clone() {
      return new SimulatorState(this);
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 1;
    private float speed_;
    /// <summary>
    /// Meters per second 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "wheel_off_track" field.</summary>
    public const int WheelOffTrackFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_wheelOffTrack_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> wheelOffTrack_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// [0] = FL, [1] = FR, [2] = RL, [3] = RR 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> WheelOffTrack {
      get { return wheelOffTrack_; }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::ProtobufMsgs.SimulatorImageOutput image_;
    /// <summary>
    /// Image frame 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ProtobufMsgs.SimulatorImageOutput Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_pos_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> pos_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// [0] = x, [1] = y, [2] = z 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "isDrifting" field.</summary>
    public const int IsDriftingFieldNumber = 5;
    private bool isDrifting_;
    /// <summary>
    /// =false when not drifting 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDrifting {
      get { return isDrifting_; }
      set {
        isDrifting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimulatorState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimulatorState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if(!wheelOffTrack_.Equals(other.wheelOffTrack_)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if(!pos_.Equals(other.pos_)) return false;
      if (IsDrifting != other.IsDrifting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      hash ^= wheelOffTrack_.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      hash ^= pos_.GetHashCode();
      if (IsDrifting != false) hash ^= IsDrifting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Speed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Speed);
      }
      wheelOffTrack_.WriteTo(output, _repeated_wheelOffTrack_codec);
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      if (IsDrifting != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsDrifting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Speed != 0F) {
        size += 1 + 4;
      }
      size += wheelOffTrack_.CalculateSize(_repeated_wheelOffTrack_codec);
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      if (IsDrifting != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimulatorState other) {
      if (other == null) {
        return;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      wheelOffTrack_.Add(other.wheelOffTrack_);
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::ProtobufMsgs.SimulatorImageOutput();
        }
        Image.MergeFrom(other.Image);
      }
      pos_.Add(other.pos_);
      if (other.IsDrifting != false) {
        IsDrifting = other.IsDrifting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Speed = input.ReadFloat();
            break;
          }
          case 18:
          case 16: {
            wheelOffTrack_.AddEntriesFrom(input, _repeated_wheelOffTrack_codec);
            break;
          }
          case 26: {
            if (image_ == null) {
              Image = new global::ProtobufMsgs.SimulatorImageOutput();
            }
            input.ReadMessage(Image);
            break;
          }
          case 34:
          case 37: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 40: {
            IsDrifting = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
