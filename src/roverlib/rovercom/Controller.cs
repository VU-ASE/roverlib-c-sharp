// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/controller.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/controller.proto</summary>
  public static partial class ControllerReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/controller.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControllerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhvdXRwdXRzL2NvbnRyb2xsZXIucHJvdG8SDXByb3RvYnVmX21zZ3MipAEK",
            "EENvbnRyb2xsZXJPdXRwdXQSFQoNc3RlZXJpbmdBbmdsZRgCIAEoAhIUCgxs",
            "ZWZ0VGhyb3R0bGUYAyABKAISFQoNcmlnaHRUaHJvdHRsZRgEIAEoAhITCgtm",
            "cm9udExpZ2h0cxgFIAEoCBIQCghmYW5TcGVlZBgGIAEoAhIQCghyYXdFcnJv",
            "chgHIAEoAhITCgtzY2FsZWRFcnJvchgIIAEoAkIQWg5hc2UvcGJfb3V0cHV0",
            "c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.ControllerOutput), global::ProtobufMsgs.ControllerOutput.Parser, new[]{ "SteeringAngle", "LeftThrottle", "RightThrottle", "FrontLights", "FanSpeed", "RawError", "ScaledError" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ControllerOutput : pb::IMessage<ControllerOutput> {
    private static readonly pb::MessageParser<ControllerOutput> _parser = new pb::MessageParser<ControllerOutput>(() => new ControllerOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControllerOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.ControllerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerOutput(ControllerOutput other) : this() {
      steeringAngle_ = other.steeringAngle_;
      leftThrottle_ = other.leftThrottle_;
      rightThrottle_ = other.rightThrottle_;
      frontLights_ = other.frontLights_;
      fanSpeed_ = other.fanSpeed_;
      rawError_ = other.rawError_;
      scaledError_ = other.scaledError_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerOutput Clone() {
      return new ControllerOutput(this);
    }

    /// <summary>Field number for the "steeringAngle" field.</summary>
    public const int SteeringAngleFieldNumber = 2;
    private float steeringAngle_;
    /// <summary>
    /// Steering angle (-1.0 to 1.0 &lt;-> left - right)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SteeringAngle {
      get { return steeringAngle_; }
      set {
        steeringAngle_ = value;
      }
    }

    /// <summary>Field number for the "leftThrottle" field.</summary>
    public const int LeftThrottleFieldNumber = 3;
    private float leftThrottle_;
    /// <summary>
    /// Throttle (-1.0 to 1.0 &lt;-> full reverse - full forward)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftThrottle {
      get { return leftThrottle_; }
      set {
        leftThrottle_ = value;
      }
    }

    /// <summary>Field number for the "rightThrottle" field.</summary>
    public const int RightThrottleFieldNumber = 4;
    private float rightThrottle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightThrottle {
      get { return rightThrottle_; }
      set {
        rightThrottle_ = value;
      }
    }

    /// <summary>Field number for the "frontLights" field.</summary>
    public const int FrontLightsFieldNumber = 5;
    private bool frontLights_;
    /// <summary>
    /// Onboard lights (0.0 to 1.0 &lt;-> off - on)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FrontLights {
      get { return frontLights_; }
      set {
        frontLights_ = value;
      }
    }

    /// <summary>Field number for the "fanSpeed" field.</summary>
    public const int FanSpeedFieldNumber = 6;
    private float fanSpeed_;
    /// <summary>
    /// Fan speed (0.0 to 1.0 &lt;-> off - full speed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FanSpeed {
      get { return fanSpeed_; }
      set {
        fanSpeed_ = value;
      }
    }

    /// <summary>Field number for the "rawError" field.</summary>
    public const int RawErrorFieldNumber = 7;
    private float rawError_;
    /// <summary>
    /// Useful for debugging
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RawError {
      get { return rawError_; }
      set {
        rawError_ = value;
      }
    }

    /// <summary>Field number for the "scaledError" field.</summary>
    public const int ScaledErrorFieldNumber = 8;
    private float scaledError_;
    /// <summary>
    /// the error value after quadratic scaling, but before PID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaledError {
      get { return scaledError_; }
      set {
        scaledError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControllerOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControllerOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SteeringAngle, other.SteeringAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftThrottle, other.LeftThrottle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightThrottle, other.RightThrottle)) return false;
      if (FrontLights != other.FrontLights) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FanSpeed, other.FanSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RawError, other.RawError)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaledError, other.ScaledError)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SteeringAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SteeringAngle);
      if (LeftThrottle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftThrottle);
      if (RightThrottle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightThrottle);
      if (FrontLights != false) hash ^= FrontLights.GetHashCode();
      if (FanSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FanSpeed);
      if (RawError != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RawError);
      if (ScaledError != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaledError);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SteeringAngle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SteeringAngle);
      }
      if (LeftThrottle != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LeftThrottle);
      }
      if (RightThrottle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RightThrottle);
      }
      if (FrontLights != false) {
        output.WriteRawTag(40);
        output.WriteBool(FrontLights);
      }
      if (FanSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FanSpeed);
      }
      if (RawError != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RawError);
      }
      if (ScaledError != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ScaledError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SteeringAngle != 0F) {
        size += 1 + 4;
      }
      if (LeftThrottle != 0F) {
        size += 1 + 4;
      }
      if (RightThrottle != 0F) {
        size += 1 + 4;
      }
      if (FrontLights != false) {
        size += 1 + 1;
      }
      if (FanSpeed != 0F) {
        size += 1 + 4;
      }
      if (RawError != 0F) {
        size += 1 + 4;
      }
      if (ScaledError != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControllerOutput other) {
      if (other == null) {
        return;
      }
      if (other.SteeringAngle != 0F) {
        SteeringAngle = other.SteeringAngle;
      }
      if (other.LeftThrottle != 0F) {
        LeftThrottle = other.LeftThrottle;
      }
      if (other.RightThrottle != 0F) {
        RightThrottle = other.RightThrottle;
      }
      if (other.FrontLights != false) {
        FrontLights = other.FrontLights;
      }
      if (other.FanSpeed != 0F) {
        FanSpeed = other.FanSpeed;
      }
      if (other.RawError != 0F) {
        RawError = other.RawError;
      }
      if (other.ScaledError != 0F) {
        ScaledError = other.ScaledError;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            SteeringAngle = input.ReadFloat();
            break;
          }
          case 29: {
            LeftThrottle = input.ReadFloat();
            break;
          }
          case 37: {
            RightThrottle = input.ReadFloat();
            break;
          }
          case 40: {
            FrontLights = input.ReadBool();
            break;
          }
          case 53: {
            FanSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            RawError = input.ReadFloat();
            break;
          }
          case 69: {
            ScaledError = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
