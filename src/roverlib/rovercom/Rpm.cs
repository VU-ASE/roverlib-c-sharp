// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/rpm.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/rpm.proto</summary>
  public static partial class RpmReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/rpm.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpmReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFvdXRwdXRzL3JwbS5wcm90bxINcHJvdG9idWZfbXNncyJbCg9ScG1TZW5z",
            "b3JPdXRwdXQSDwoHbGVmdFJwbRgBIAEoAhIRCglsZWZ0QW5nbGUYAiABKAIS",
            "EAoIcmlnaHRScG0YAyABKAISEgoKcmlnaHRBbmdsZRgEIAEoAkIQWg5hc2Uv",
            "cGJfb3V0cHV0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.RpmSensorOutput), global::ProtobufMsgs.RpmSensorOutput.Parser, new[]{ "LeftRpm", "LeftAngle", "RightRpm", "RightAngle" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RpmSensorOutput : pb::IMessage<RpmSensorOutput> {
    private static readonly pb::MessageParser<RpmSensorOutput> _parser = new pb::MessageParser<RpmSensorOutput>(() => new RpmSensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpmSensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.RpmReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpmSensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpmSensorOutput(RpmSensorOutput other) : this() {
      leftRpm_ = other.leftRpm_;
      leftAngle_ = other.leftAngle_;
      rightRpm_ = other.rightRpm_;
      rightAngle_ = other.rightAngle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpmSensorOutput Clone() {
      return new RpmSensorOutput(this);
    }

    /// <summary>Field number for the "leftRpm" field.</summary>
    public const int LeftRpmFieldNumber = 1;
    private float leftRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftRpm {
      get { return leftRpm_; }
      set {
        leftRpm_ = value;
      }
    }

    /// <summary>Field number for the "leftAngle" field.</summary>
    public const int LeftAngleFieldNumber = 2;
    private float leftAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftAngle {
      get { return leftAngle_; }
      set {
        leftAngle_ = value;
      }
    }

    /// <summary>Field number for the "rightRpm" field.</summary>
    public const int RightRpmFieldNumber = 3;
    private float rightRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightRpm {
      get { return rightRpm_; }
      set {
        rightRpm_ = value;
      }
    }

    /// <summary>Field number for the "rightAngle" field.</summary>
    public const int RightAngleFieldNumber = 4;
    private float rightAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightAngle {
      get { return rightAngle_; }
      set {
        rightAngle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpmSensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpmSensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftRpm, other.LeftRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftAngle, other.LeftAngle)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightRpm, other.RightRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightAngle, other.RightAngle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftRpm);
      if (LeftAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftAngle);
      if (RightRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightRpm);
      if (RightAngle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightAngle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftRpm != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LeftRpm);
      }
      if (LeftAngle != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LeftAngle);
      }
      if (RightRpm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RightRpm);
      }
      if (RightAngle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RightAngle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftRpm != 0F) {
        size += 1 + 4;
      }
      if (LeftAngle != 0F) {
        size += 1 + 4;
      }
      if (RightRpm != 0F) {
        size += 1 + 4;
      }
      if (RightAngle != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpmSensorOutput other) {
      if (other == null) {
        return;
      }
      if (other.LeftRpm != 0F) {
        LeftRpm = other.LeftRpm;
      }
      if (other.LeftAngle != 0F) {
        LeftAngle = other.LeftAngle;
      }
      if (other.RightRpm != 0F) {
        RightRpm = other.RightRpm;
      }
      if (other.RightAngle != 0F) {
        RightAngle = other.RightAngle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LeftRpm = input.ReadFloat();
            break;
          }
          case 21: {
            LeftAngle = input.ReadFloat();
            break;
          }
          case 29: {
            RightRpm = input.ReadFloat();
            break;
          }
          case 37: {
            RightAngle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
