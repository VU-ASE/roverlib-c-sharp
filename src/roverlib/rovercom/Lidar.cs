// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/lidar.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/lidar.proto</summary>
  public static partial class LidarReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/lidar.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LidarReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNvdXRwdXRzL2xpZGFyLnByb3RvEg1wcm90b2J1Zl9tc2dzIpQBChFMaWRh",
            "clNlbnNvck91dHB1dBI0CgVzY2FucxgBIAMoCzIlLnByb3RvYnVmX21zZ3Mu",
            "TGlkYXJTZW5zb3JPdXRwdXQuU2NhbhpJCgRTY2FuEg0KBWFuZ2xlGAEgASgC",
            "EhAKCGRpc3RhbmNlGAIgASgCEg8KB3F1YWxpdHkYAyABKA0SDwoHaXNTdGFy",
            "dBgEIAEoCEIQWg5hc2UvcGJfb3V0cHV0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.LidarSensorOutput), global::ProtobufMsgs.LidarSensorOutput.Parser, new[]{ "Scans" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.LidarSensorOutput.Types.Scan), global::ProtobufMsgs.LidarSensorOutput.Types.Scan.Parser, new[]{ "Angle", "Distance", "Quality", "IsStart" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LidarSensorOutput : pb::IMessage<LidarSensorOutput> {
    private static readonly pb::MessageParser<LidarSensorOutput> _parser = new pb::MessageParser<LidarSensorOutput>(() => new LidarSensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LidarSensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.LidarReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarSensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarSensorOutput(LidarSensorOutput other) : this() {
      scans_ = other.scans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LidarSensorOutput Clone() {
      return new LidarSensorOutput(this);
    }

    /// <summary>Field number for the "scans" field.</summary>
    public const int ScansFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ProtobufMsgs.LidarSensorOutput.Types.Scan> _repeated_scans_codec
        = pb::FieldCodec.ForMessage(10, global::ProtobufMsgs.LidarSensorOutput.Types.Scan.Parser);
    private readonly pbc::RepeatedField<global::ProtobufMsgs.LidarSensorOutput.Types.Scan> scans_ = new pbc::RepeatedField<global::ProtobufMsgs.LidarSensorOutput.Types.Scan>();
    /// <summary>
    /// Many (but not necessarily all) scans in a single rotation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ProtobufMsgs.LidarSensorOutput.Types.Scan> Scans {
      get { return scans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LidarSensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LidarSensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scans_.Equals(other.scans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scans_.WriteTo(output, _repeated_scans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scans_.CalculateSize(_repeated_scans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LidarSensorOutput other) {
      if (other == null) {
        return;
      }
      scans_.Add(other.scans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            scans_.AddEntriesFrom(input, _repeated_scans_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LidarSensorOutput message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A scan corresponds to a single shot of the laser. One rotation contains many scans.
      /// </summary>
      public sealed partial class Scan : pb::IMessage<Scan> {
        private static readonly pb::MessageParser<Scan> _parser = new pb::MessageParser<Scan>(() => new Scan());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Scan> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::ProtobufMsgs.LidarSensorOutput.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scan() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scan(Scan other) : this() {
          angle_ = other.angle_;
          distance_ = other.distance_;
          quality_ = other.quality_;
          isStart_ = other.isStart_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scan Clone() {
          return new Scan(this);
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 1;
        private float angle_;
        /// <summary>
        /// angle in degrees
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        /// <summary>Field number for the "distance" field.</summary>
        public const int DistanceFieldNumber = 2;
        private float distance_;
        /// <summary>
        /// distance in meters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Distance {
          get { return distance_; }
          set {
            distance_ = value;
          }
        }

        /// <summary>Field number for the "quality" field.</summary>
        public const int QualityFieldNumber = 3;
        private uint quality_;
        /// <summary>
        /// quality of the scan (0 is worst, 255 is best)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Quality {
          get { return quality_; }
          set {
            quality_ = value;
          }
        }

        /// <summary>Field number for the "isStart" field.</summary>
        public const int IsStartFieldNumber = 4;
        private bool isStart_;
        /// <summary>
        /// true if this is the start of a new scan rotation
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsStart {
          get { return isStart_; }
          set {
            isStart_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Scan);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Scan other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Distance, other.Distance)) return false;
          if (Quality != other.Quality) return false;
          if (IsStart != other.IsStart) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
          if (Distance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Distance);
          if (Quality != 0) hash ^= Quality.GetHashCode();
          if (IsStart != false) hash ^= IsStart.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Angle != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Angle);
          }
          if (Distance != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Distance);
          }
          if (Quality != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Quality);
          }
          if (IsStart != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsStart);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Angle != 0F) {
            size += 1 + 4;
          }
          if (Distance != 0F) {
            size += 1 + 4;
          }
          if (Quality != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
          }
          if (IsStart != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Scan other) {
          if (other == null) {
            return;
          }
          if (other.Angle != 0F) {
            Angle = other.Angle;
          }
          if (other.Distance != 0F) {
            Distance = other.Distance;
          }
          if (other.Quality != 0) {
            Quality = other.Quality;
          }
          if (other.IsStart != false) {
            IsStart = other.IsStart;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Angle = input.ReadFloat();
                break;
              }
              case 21: {
                Distance = input.ReadFloat();
                break;
              }
              case 24: {
                Quality = input.ReadUInt32();
                break;
              }
              case 32: {
                IsStart = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
