// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: outputs/energy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ProtobufMsgs {

  /// <summary>Holder for reflection information generated from outputs/energy.proto</summary>
  public static partial class EnergyReflection {

    #region Descriptor
    /// <summary>File descriptor for outputs/energy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EnergyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRvdXRwdXRzL2VuZXJneS5wcm90bxINcHJvdG9idWZfbXNncyJUChJFbmVy",
            "Z3lTZW5zb3JPdXRwdXQSFQoNc3VwcGx5Vm9sdGFnZRgBIAEoAhITCgtjdXJy",
            "ZW50QW1wcxgCIAEoAhISCgpwb3dlcldhdHRzGAMgASgCQhBaDmFzZS9wYl9v",
            "dXRwdXRzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ProtobufMsgs.EnergySensorOutput), global::ProtobufMsgs.EnergySensorOutput.Parser, new[]{ "SupplyVoltage", "CurrentAmps", "PowerWatts" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EnergySensorOutput : pb::IMessage<EnergySensorOutput> {
    private static readonly pb::MessageParser<EnergySensorOutput> _parser = new pb::MessageParser<EnergySensorOutput>(() => new EnergySensorOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnergySensorOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ProtobufMsgs.EnergyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergySensorOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergySensorOutput(EnergySensorOutput other) : this() {
      supplyVoltage_ = other.supplyVoltage_;
      currentAmps_ = other.currentAmps_;
      powerWatts_ = other.powerWatts_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnergySensorOutput Clone() {
      return new EnergySensorOutput(this);
    }

    /// <summary>Field number for the "supplyVoltage" field.</summary>
    public const int SupplyVoltageFieldNumber = 1;
    private float supplyVoltage_;
    /// <summary>
    /// The measure supply voltage measured in volts (V).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SupplyVoltage {
      get { return supplyVoltage_; }
      set {
        supplyVoltage_ = value;
      }
    }

    /// <summary>Field number for the "currentAmps" field.</summary>
    public const int CurrentAmpsFieldNumber = 2;
    private float currentAmps_;
    /// <summary>
    /// The current amp draw in amperes (A) of the power supply source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurrentAmps {
      get { return currentAmps_; }
      set {
        currentAmps_ = value;
      }
    }

    /// <summary>Field number for the "powerWatts" field.</summary>
    public const int PowerWattsFieldNumber = 3;
    private float powerWatts_;
    /// <summary>
    /// The current power output of the Rover measured in watts (W).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PowerWatts {
      get { return powerWatts_; }
      set {
        powerWatts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnergySensorOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnergySensorOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SupplyVoltage, other.SupplyVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentAmps, other.CurrentAmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PowerWatts, other.PowerWatts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SupplyVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SupplyVoltage);
      if (CurrentAmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentAmps);
      if (PowerWatts != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PowerWatts);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SupplyVoltage != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SupplyVoltage);
      }
      if (CurrentAmps != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CurrentAmps);
      }
      if (PowerWatts != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PowerWatts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SupplyVoltage != 0F) {
        size += 1 + 4;
      }
      if (CurrentAmps != 0F) {
        size += 1 + 4;
      }
      if (PowerWatts != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnergySensorOutput other) {
      if (other == null) {
        return;
      }
      if (other.SupplyVoltage != 0F) {
        SupplyVoltage = other.SupplyVoltage;
      }
      if (other.CurrentAmps != 0F) {
        CurrentAmps = other.CurrentAmps;
      }
      if (other.PowerWatts != 0F) {
        PowerWatts = other.PowerWatts;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SupplyVoltage = input.ReadFloat();
            break;
          }
          case 21: {
            CurrentAmps = input.ReadFloat();
            break;
          }
          case 29: {
            PowerWatts = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
